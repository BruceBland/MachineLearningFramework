
# Auto sclae the data frame but only for columns specified
AutoScale <- function(DataFrame = "",
                      Columns = "",
                      Debug=TRUE,
                      AllColumns=FALSE,
                      LogColumns="",
                      SqrtColumns="",
                      OneHotEncodeFactorColumns=FALSE)
{
  # Check something was specified
  if (DataFrame == "" || class(DataFrame) != "data.frame") {
    print("Must specify a data frame")
  }
  if (class(Columns) != "character") {
    print("Must specify a vector of column names")
  }
  if (class(LogColumns) != "character") {
    print("Must specify a vector of column names you wish to log")
  }
  if (class(SqrtColumns) != "character") {
    print("Must specify a vector of sqrt column names you wish to sqrt")
  }
  if (class(OneHotEncodeFactorColumns) != "character") {
    print("Must specify a vector of sqrt column names you wish to sqrt")
  }
  
  # Set up a vector for max, mins and logs
  MaximumValues <- vector(mode = "logical", length = length(Columns))
  MinimumValues <- vector(mode = "logical", length = length(Columns))
  LoggedValues <- vector(mode = "logical", length = length(Columns))
  SqrtValues <- vector(mode = "logical", length = length(Columns))
  
  if (AllColumns == TRUE)
  {
    Columns <- colnames(DataFrame)
  }
  
  # First get the max and min values for the data frames columns
  i <- 0
  for (Column in Columns)
  {
    
    i <- i + 1
    
    # Get the column from the list
    DataColumn <- DataFrame[,Column]
    
    # Ignore columns that are factors
    if (is.factor(DataColumn) == FALSE)
    {
      if (Debug==TRUE) {print(paste("     ",Column,"is not a factor"))}
      LoggedValues[i] <- 0
      SqrtValues[i] <- 0
      
      if(Column %in% LogColumns == TRUE)
      {
        if (Debug==TRUE) {print(paste("     ",Column,"Will be logged (base 10) before scaling"))}
        DataColumn <- log10(DataColumn)
        LoggedValues[i] <- 1
      }
      if(Column %in% SqrtColumns == TRUE)
      {
        if (Debug==TRUE) {print(paste("     ",Column,"Will be square rooted before scaling"))}
        DataColumn <- sqrt(DataColumn)
        SqrtValues[i] <- 1
      }
    
      MaximumValues[i] <- max(DataColumn)
      MinimumValues[i] <- min(DataColumn)
      
      if (Debug==TRUE) {print(paste("     ",Column,"has max",MaximumValues[i],"and min",MinimumValues[i]))}
      
      DataFrame[,Column] <- scale(DataColumn,center = MinimumValues[i],scale = MaximumValues[i] - MinimumValues[i])
      
    } else {
      if (Debug==TRUE) {print(paste("     ",Column,"is a factor so will not be changed"))}
      
    }
    
  }
  
  # One hot encode all the factor columns
  if (OneHotEncodeFactorColumns == TRUE)
  {
    # First refactor all the factor columns
    DataFrame <- as.data.frame(lapply(DataFrame, function (x) if (is.factor(x)) factor(x) else x)) 
    
    # One hot encode all the data in the data frame
    DataFrame = as.data.frame(model.matrix(~.-1,DataFrame))    # Convert to matrix
    
    # Remove spaces from the column names and replace with little x
    names(DataFrame) <-gsub(" ","x", names(DataFrame))
  }
  
  # Returns modified data frame and max and min values
  return(list(DataFrame,MaximumValues,MinimumValues,LoggedValues,SqrtValues,Columns))
  
}


# Un scale a prediction using the autoscaling data
UnAutoScale <- function(DataFrame = "",
                        ScaledColumns = "",
                        ColumnName = "",
                        PredictionName = "",
                        Debug=TRUE,
                        MaxValues = "",
                        MinValues = "",
                        LogColumns="",
                        SqrtColumns="")
{
  # Check something was specified
  if (DataFrame == "" || class(DataFrame) != "data.frame") {
    print("Must specify a data frame")
  }
  if (class(ScaledColumns) != "character") {
    print("Must specify a vector of column names")
  }
  if (class(ColumnName) != "character") {
    print("Must specify a vector of column names")
  }
  if (class(PredictionName) != "character") {
    print("Must specify a vector of column names")
  }
  if (class(MaxValues) != "numeric") {
    print("Must specify a vector of column names you wish to log")
  }
  if (class(MinValues) != "numeric") {
    print("Must specify a vector of sqrt column names you wish to sqrt")
  }
  if (class(LogColumns) != "numeric") {
    print("Must specify a vector of column names you wish to log")
  }
  if (class(SqrtColumns) != "numeric") {
    print("Must specify a vector of sqrt column names you wish to sqrt")
  }

  # Get the column from the list
  if (Debug==TRUE) {print(paste("     ",PredictionName,"will be unscaled"))}
  DataColumn <- DataFrame[,PredictionName]
  
  if (Debug==TRUE) {print(paste("     ",ColumnName,"used as original column to predict"))}
  ActualDataColumn <- DataFrame[,ColumnName]
  
  # Now work out the scaling used on the column
  OriginalColumn <- which(ScaledColumns == ColumnName)
  OrigColumnName <- ScaledColumns[OriginalColumn]
  
  if (Debug==TRUE) {print(paste("     ",OriginalColumn,"was the original column number"))}
  OrigMaximum <- MaxValues[OriginalColumn]
  if (Debug==TRUE) {print(paste("     ",OrigMaximum,"was the original maximum"))}
  OrigMinimum <- MinValues[OriginalColumn]
  if (Debug==TRUE) {print(paste("     ",OrigMinimum,"was the original minimum"))}
  OrigLog <- LogColumns[OriginalColumn]
  if (Debug==TRUE) {print(paste("     ",OrigLog,"was the original log (1=TRUE)"))}
  OrigSqrt <- SqrtColumns[OriginalColumn]
  if (Debug==TRUE) {print(paste("     ",OrigSqrt,"was the original sqrt (1=TRUE)"))}
  
  # Rescale
  DataFrame$Prediction <- DataColumn * (OrigMaximum - OrigMinimum) + OrigMinimum
  DataFrame$Original <- ActualDataColumn * (OrigMaximum - OrigMinimum) + OrigMinimum
  
  # Now unlog or sqrt
  if (OrigLog == 1)
  {
    DataFrame$Prediction <- 10^DataFrame$Prediction
    DataFrame$Original <- 10^DataFrame$Original
  }
  if (OrigSqrt == 1)
  {
    DataFrame$Prediction <- DataFrame$Prediction * DataFrame$Prediction
    DataFrame$Original <- DataFrame$Original * DataFrame$Original
  }
  
  return(DataFrame)
  
}

# load the example dataset
data(iris)

# or this is you want all columns scaled with no log or sqrt functions applied
ScaledDataFrame <- AutoScale(DataFrame = iris,
                             Columns = "",      # eg c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
                             AllColumns = TRUE,
                             LogColumns = "",   # eg c("Sepal.Width")
                             SqrtColumns = "",
                             OneHotEncodeFactorColumns = TRUE)

print(ScaledDataFrame)

Model <- glm(ScaledDataFrame[[1]]$Sepal.Length ~ ScaledDataFrame[[1]]$Sepal.Width +
                                                  ScaledDataFrame[[1]]$Petal.Length + 
                                                  ScaledDataFrame[[1]]$Petal.Width +
                                                  ScaledDataFrame[[1]]$Speciessetosa +
                                                  ScaledDataFrame[[1]]$Speciesversicolor +
                                                  ScaledDataFrame[[1]]$Speciesvirginica)

ScaledDataFrame[[1]]$Pred <- predict(Model,ScaledDataFrame[[1]])

# Unscale a column
UnscaledDataFrame <- UnAutoScale(DataFrame = ScaledDataFrame[[1]],
                                 ScaledColumns = ScaledDataFrame[[6]],
                                 ColumnName = "Sepal.Length",
                                 PredictionName = "Pred",
                                 MaxValues = ScaledDataFrame[[2]],
                                 MinValues = ScaledDataFrame[[3]],
                                 LogColumns = ScaledDataFrame[[4]],
                                 SqrtColumns = ScaledDataFrame[[5]])

plot(iris$Sepal.Length)
lines(UnscaledDataFrame$Prediction)
