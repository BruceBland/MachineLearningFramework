
###########################################################
#
#
#    BenchTest_Standard_R_DataSets_Prediction.R
#
###########################################################


source("BenchTest_Machine_Learning_Framework.R")

####################################
#
# SpecialModel
#
####################################
TrainingModelSpecialModel <- function(DataFrame,
                                      ColumnNames,
                                      PredictVariable="",
                                      Backtest=TRUE,
                                      Debug=TRUE,
                                      SaveModel=FALSE,
                                      PlotImportance=TRUE,
                                      FileName = "Model")
{
  Debug <- TRUE
  
  if (Debug==TRUE) {print("Training on data using SpecialModel Example")}
  if (Debug==TRUE) {print(paste("Predicting ....",PredictVariable))}
  if (Debug==TRUE) {print("Using Columns ....")}
  if (Debug==TRUE) {print(ColumnNames)}
  
  
  # Select Cols required
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  PredictVariable <- DataFrame[,PredictVariable]
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  DataFrame <- cbind(VariableColumns,PredictVariable)
  
  #Print the SpecialModel parameters here ...
  # eg if (Debug==TRUE) {print(paste("    Link = ",Link))}
  
  # Train
  if (MLParameterList$RegressionType != "regression")
  {
    Model = lm(PredictVariable ~ . ,
                data = DataFrame)
  } else {
    Model = lm(PredictVariable ~ . ,
                data = DataFrame)
  }        
  
  # Save model if required
  if (SaveModel == TRUE) {
    saveRDS(Model, paste(FileName,"_SpecialModel.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Saving to ",FileName,"_SpecialModel.rds",sep=""))}
  }
  
  
  # Additional analysis goes here
  #
  
  return(Model)
  
}

PredictSpecialModel <- function(DataFrame,
                                ColumnNames,
                                Model,
                                type = "",
                                Backtest=TRUE,
                                Debug=TRUE,
                                LoadModel=FALSE,
                                FileName="Model",
                                PredictVariable="")
{
  if (Debug==TRUE) {print("Predicting from model and data using SpecialModel Model")}
  
  # Load Model required
  if (LoadModel == TRUE) {
    Model = readRDS(paste(FileName,"_SpecialModel.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Loaded from ",FileName,"_SpecialModel.rds",sep=""))}
  }
  
  #VariableColumns <- DataFrame[,ColumnNames]
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  DataFrame$Prediction <- predict(Model,VariableColumns)
  
  return(DataFrame)
}



# Load a data set
DataLoadAndFormat <- function(Backtest=TRUE,Debug=TRUE,ConvertToFactors=FALSE,DataLoadParameters="")
{
  if (Debug==TRUE) {print("Creating calibration data")}
  
  DataFrame = data.frame(iris)
 # ModelDF = data.frame(diamonds)
 # ModelDF = data.frame(USArrests)
 # ModelDF = data.frame(ToothGrowth)
  
  if (Debug==TRUE) {print("Finished loading test data")}
  
  return(DataFrame)
  
}

# Call these two functions when script is sourced
DataLoadParameters <- SetDataLoadParameters(Debug=TRUE)
MLParameterList    <- SetParameters(Debug=TRUE)

MLParameterList$AutoScaling         <- TRUE
MLParameterList$ProjectTitle        <- "Sepal.Length"
MLParameterList$PredictionVariable  <- "Sepal.Length" 
MLParameterList$SplitPercent        <- 80/100
MLParameterList$Debug               <- FALSE
MLParameterList$SamplingMethod            <- FALSE  # WARNING : Set to false for time series data
MLParameterList$SaveModelToFile           <- TRUE
MLParameterList$RegressionType <- "regression"

# Data analysis function
MLDataAnalysis(MLParameterList,DataLoadParameters)

# Auto ML - Which model gives best predictions
ModelsToTest <- c("RF","NN","KNN","RFRLT","SVM","KERAS","XGB","GLM")
ModelsToTest <- rep("SpecialModel",1)

ListOfResults <- data.frame(Model = "NA",RMSE = 0)
for (Model in ModelsToTest)
{
  MLParameterList$RegressionModel           <- Model 
  Results <- MLTraining(MLParameterList,DataLoadParameters)
  
  # Plot the shape
  Results$X <- seq(1,nrow(Results))
  ResultsPlot <- ggplot(Results,aes(x=X,y=Prediction)) +
    geom_point(aes(x=X,y=Prediction),
               colour="Red",
               fill="Darkred",
               size=1) +
    geom_point(aes(x=X,y=Actual),
               colour="DarkGreen",
               fill="DarkGreen",
               size=1) +
    xlab(paste("X")) +
    ylab(paste("Prediction")) +
    theme(plot.title = element_text(size = 12),
          axis.title.x = element_text(size = 10),
          axis.title.y = element_text(size = 10),
          text = element_text(size = 8)) +
    ggtitle(paste("Results",MLParameterList$ProjectTitle,"using model",Model))
  print(ResultsPlot)
  
  # Calculate RMSE
  RMSE          <- sqrt(mean(Results$Error * Results$Error))
  ListOfResults <- rbind(ListOfResults,data.frame(Model=Model,RMSE=RMSE))
  
}
ListOfResults <- ListOfResults[-1,] # Remove the first one

# Round Results
ListOfResults$RMSE <- round(ListOfResults$RMSE,3)

# Now arrange
library(plyr)
ListOfResults <- arrange(ListOfResults,RMSE)
print(ListOfResults)
print(paste("Mean result",mean(ListOfResults$RMSE)))
print(paste("SD result",sd(ListOfResults$RMSE)))
hist(ListOfResults$RMSE)
  

