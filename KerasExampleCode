
library(keras)
library(tidyverse)

########################################
#
# KERAS Training Function
#
########################################

TrainingModelKeras <- function(DataFrame,
                                 ColumnNames="",
                                 PredictVariable="",
                                 Backtest=TRUE,
                                 Debug=TRUE,
                                 SaveModel=FALSE,
                                 FileName = "Model",
                                 Type="Classification",
                                 Epochs=10,
                                 BatchSize = 128,
                                 ValidationSplit=0.2)
{
  if (Debug==TRUE) {print(paste("Training on data using Keras model for type = ",Type))}
  if (Debug==TRUE) {print(paste("Predicting ....",PredictVariable))}
  if (Debug==TRUE) {print("Using Columns ....")}
  if (Debug==TRUE) {print(ColumnNames)}
  
  # Select Cols required
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  PredictVariable <- DataFrame[,PredictVariable]
  VariableColumns <- DataFrame[,VariableNames]
  
  # Convert to matrix
  VariableColumns <- as.matrix(VariableColumns)
  
  
  
  ## Creating the sequential model for classification
  CreateModelClassification <- function()
  {
    model = keras_model_sequential() %>%   
      layer_dense(units = 64, activation = "relu", 
                  input_shape = ncol(VariableColumns)) %>%
      layer_dense(units = 64, activation = "relu") %>%
      layer_dense(units = ncol(y_data_oneh), activation = "softmax")
    
    compile(model, 
            loss = "categorical_crossentropy", 
            optimizer = optimizer_rmsprop(), 
            metrics = "accuracy")
      
    return(model)
  }
  
  ## Creating the sequential model for regression
  CreateModelRegression <- function()
  {
    model <- keras_model_sequential() %>%
      layer_dense(units = 64, activation = "relu",
                  input_shape = dim(VariableColumns)[2]) %>%
      layer_dense(units = 64, activation = "relu") %>%
      layer_dense(units = 1)
    
    model %>% compile(
      loss = "mse",
      optimizer = optimizer_rmsprop(),
      metrics = list("mean_absolute_error")
    )
    
    
    return(model)
  }
  
  if (Type == "Classification")
  {
    
    y_data_oneh=to_categorical(PredictVariable, num_classes = 2)
    print(head(y_data_oneh))
    model <- CreateModelClassification()
    
  }
  
  if (Type == "Regression")
  {
    model <- CreateModelRegression()
    y_data_oneh = PredictVariable
  }
  
  # Fit model to data 
  history = fit(model,  VariableColumns, y_data_oneh, epochs = Epochs, batch_size = BatchSize, validation_split = ValidationSplit)
  plot(history)
  
  # Save model if required
  if (SaveModel == TRUE) {
    model %>% save_model_hdf5(paste(FileName,"_Keras.hdf5",sep=""))
    if (Debug==TRUE) {print(paste("    Saving to ",FileName,"_Keras.hdf5",sep=""))}
  }
  
  return(model)
  
}

########################################
#
# KERAS Prediction Function
#
########################################
PredictKeras <- function(DataFrame,
                         ColumnNames,
                         Model,
                         Backtest=TRUE,
                         Debug=TRUE,
                         LoadModel=FALSE,
                         FileName="Model",
                         PredictVariable="",
                         Type="Classification")
{
  if (Debug==TRUE) {print(paste("Predicting from model and data using Keras Model for",Type))}
  
  # Load Model required
  if (LoadModel == TRUE) {
    model <- load_model_hdf5(paste(FileName,"_Keras.hdf5",sep=""))
    if (Debug==TRUE) {print(paste("    Loaded from ",FileName,"_Keras.hdf5",sep=""))}
  }
  
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  VariableColumns <- DataFrame[,VariableNames]
  
  # Convert to matrix
  VariableColumns <- as.matrix(VariableColumns)
  
  if (Type == "Classification")
  {
    if (Debug==TRUE) {print(paste("Use predict classes to make predictions - ",Type))}
    DataFrame$Prediction = predict_classes(model, VariableColumns)
  }
  
  if (Type == "Regression")
  {
    if (Debug==TRUE) {print(paste("Use predict to make predictions - ",Type))}
    DataFrame$Prediction <- predict(model, VariableColumns)
  }
  return(DataFrame)
  
}  


###########################
#
# Example code
#
###########################
# Input: 10000 rows and 3 columns of uniform distribution
x_data=matrix(data=runif(30000), nrow=5000, ncol=3)
trainingdataframe <- as.data.frame(x_data)

# Output
trainingdataframe$y_data=ifelse(rowSums(x_data) > 1.5, 1, 0)


RegType = "Classification"
model <- TrainingModelKeras(DataFrame=trainingdataframe,
                            ColumnNames=c("V1","V2","V3"),
                            PredictVariable="y_data",
                            Backtest=TRUE,
                            Debug=TRUE,
                            SaveModel=TRUE,
                            FileName = "my_model",
                            Type=RegType,
                            Epochs=20,
                            BatchSize=128,
                            ValidationSplit = 0.2)
                          

Results <- PredictKeras(DataFrame=trainingdataframe,
                         ColumnNames=c("V1","V2","V3"),
                         model,
                         Backtest=TRUE,
                         Debug=TRUE,
                         LoadModel=FALSE,
                         FileName="my_model",
                         PredictVariable="y_data",
                         Type=RegType)
                        

print(head(Results,20))

## Validating with unseen data
x_data_test=matrix(data=runif(3000), nrow=1000, ncol=3)
testdataframe <- as.data.frame(x_data_test)

Results <- PredictKeras(DataFrame=testdataframe,
                        ColumnNames=c("V1","V2","V3"),
                        model,
                        Backtest=TRUE,
                        Debug=TRUE,
                        LoadModel=TRUE,
                        FileName="my_model",
                        PredictVariable="y_data",
                         Type=RegType)
                        
Results$real=ifelse(rowSums(x_data_test) > 1.5, 1, 0)
print(head(Results,20))
plot(Results$Prediction,Results$real)
