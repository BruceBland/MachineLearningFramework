




###########################################################
#
# Machine Learning Framework V6.0
#
# Multi models now supported including KERAS support
#
###########################################################
#
# Designed to ensure that data is correctly partioned, and processed 
#
# By B. G. Bland 
#
set.seed(50) # Forces same random number to be produced

# Example Framework code
rm(list=ls())

# Add libraries required here ...
library(tidyverse)

# Add data loading parameters here ...
SetDataLoadParameters <- function()
{
  
  # Add all the additional parameters needed to load data here (eg Instrument) ...
  DataLoadParameters = list()
  DataLoadParameters$Example = "Example Data Load parameter"
  
  return(DataLoadParameters)
}

# Function to ensure no global variables are used within the Machine Learning Functions
#
# Define your own parameters here
#
SetParameters <- function()
{

  
  # ML Params
  MLParameterList = list()
  
  MLParameterList$ProjectTitle = "Sin Wave"
  MLParameterList$ColumnsToSelectForTraining <- c("X","SinX","LinX","CosX") # Reduce data set from original
  MLParameterList$DisplayColumnNames <- MLParameterList$ColumnsToSelectForTraining
  
  MLParameterList$ConvertToFactors     <- TRUE           # Must be false for SVM
  
  # Data Pre processing option
  MLParameterList$OneHotEncodeFactors  <- TRUE         # Use for neural networks
  
  MLParameterList$Rescale     <- TRUE                     # Rescale all the values (must be one hot encoded)
  MLParameterList$Maximums    <- c(5,2,7,8) # Max values for each variable
  MLParameterList$Minimums    <- c(0,-2,0,0)       # Min value for each variable
  
  # Prediction variable
  MLParameterList$PredictionVariable <- "X"                                          # y^ the prediction variable
  MLParameterList$VariableNames <- setdiff(MLParameterList$DisplayColumnNames,MLParameterList$PredictionVariable)
  
  # Sampling method
  MLParameterList$SamplingMethod            <- TRUE
  MLParameterList$SaveModelToFile           <- FALSE
  MLParameterList$FileNameOfModel           <- "ML_Model"
  
  # Regression Options
  MLParameterList$RegressionModel           <- "RFRLT"           # Can be SVM, RF, RFRLT, NN, KNN, XGB, DEEPNET
  MLParameterList$SplitPercent              <- 80/100
  
  # RF Parameters
  MLParameterList$RegressionType            <- "regression"    # Use only regression or classification
  MLParameterList$NumberOfTrees             <- 100             # Decision tree models only
  
  # NeuralNet parameters
  MLParameterList$HiddenLayersStructure     <- c(50)           # Layers required for NN only (Nodes only for this model)
  MLParameterList$Iterations                <- 500             # Number of iterations
  
  # KNN parameters
  MLParameterList$K                         <- 10              # KNN only
  
  # Deepnet parameters
  MLParameterList$activationfun             <- "sigm"          #  activation function of hidden unit.Can be "sigm", or "tanh".Default is "sigm" for logistic function 
  MLParameterList$learningrate              <- 0.9
  MLParameterList$momentum                  <- 0.5             # momentum for gradient descent. Default is 0.5
  MLParameterList$learningrate_scale        <- 1               # learning rate for gradient descent. Default is 0.8. 
  MLParameterList$output                    <- "sigm"
  MLParameterList$numepochs                 <- 100             # increase to add accuracy
  MLParameterList$batchsize                 <- 100             # size of mini-batch. Default is 100.
  MLParameterList$hidden_dropout            <- 0               #  drop out fraction for hidden layer. Default is 0. 
  MLParameterList$visible_dropout           <- 0
  
  # Keras parameters (Note: Will not work well with small data sets)
  MLParameterList$Epochs                     = 5             # Number of training epochs - 50
  MLParameterList$BatchSize                  = 100             # Batch size                 - 128
  MLParameterList$ValidationSplit            = 0.2             # Split for validation
  
  # XGBoost
  MLParameterList$booster                    = "gbtree"        # Defaul = gbtree, or gblinear
  MLParameterList$max_depth                  = 6
  MLParameterList$eta                        = 0.3
  MLParameterList$gamma                      = 0
  MLParameterList$subsample                  = 0.5
  MLParameterList$nthread                    = 6
  MLParameterList$nrounds                    = 200
  MLParameterList$objective                  = "binary:logistic"  # "multi:softprob", or binary:logistic multi on works for many cols
  MLParameterList$verbose                    = TRUE
  
  # Load parameters
  MLParameterList$BackTest                  <- FALSE
  MLParameterList$Debug                     <- TRUE
  
  # Data Analysis Options
  MLParameterList$PrintExamplesinAnalysis   <- TRUE
  MLParameterList$DrawChartsinAnalysis      <- TRUE
  MLParameterList$DrawChartsOfResults       <- FALSE
  MLParameterList$DrawHistograms            <- FALSE
  MLParameterList$DrawVersusPlots           <- TRUE
  MLParameterList$DrawImportanceCharts      <- TRUE
  
  # Load ggplot library if charts are required
  if ((MLParameterList$DrawChartsinAnalysis == TRUE) || (MLParameterList$DrawChartsOfResults == TRUE) || (MLParameterList$DrawImportanceCharts == TRUE))
  {
    print("Loading GGPLOT2 Library")
    library(ggplot2)
  }
  
  return(MLParameterList)
  
}


#####################################################################################
#
# Functions - Edit the Data Load and Format Function to ingest the data
#
#####################################################################################

# Function to load a check data 
#DataLoadAndFormat <- function(Backtest=TRUE,Debug=TRUE,ConvertToFactors=FALSE,DataLoadParameters="")
#{
#  if (Debug==TRUE) {print("Loading data")}
#  
#  if (Debug==TRUE) {print(paste("Example data load parameter",DataLoadParameters$Example))}
#  
#  # Use example MTCARS data set
#  DataFrame <- as.data.frame(mtcars)
#  
#  # Apply filters here
#  DataFrame <- subset(DataFrame,hp > 60)   # Removes the small horsepower records
#  
#  if (ConvertToFactors==TRUE)
#  {
#    # Apply converstion to factors for columns required
#    DataFrame$carb <- factor(DataFrame$carb)
#    DataFrame$cyl <- factor(DataFrame$cyl)
#    DataFrame$gear <- factor(DataFrame$gear)
#    DataFrame$vs <- factor(DataFrame$vs)
#    DataFrame$am <- factor(DataFrame$am)
#  }
#  
#  return(DataFrame)
#  
#}

# Function to load a check data 
DataLoadAndFormat <- function(Backtest=TRUE,Debug=TRUE,ConvertToFactors=FALSE,DataLoadParameters="")
{
  if (Debug==TRUE) {print("Creating test data")}
  
  # Create an example test set for testing
  x <- seq(0,5,by=0.0001)
  Mean <- 0
  sd <- 0.05
  noise = rnorm(length(x),Mean,sd)   
  SinX <- sin(x) + noise
  
  noise = rnorm(length(x),Mean,sd)
  LinX <- x + (noise * 2)
  
  noise = rnorm(length(x),Mean,sd)
  CosX <- cos(x) + (noise * 5)
  
  df <- data.frame(X=x,SinX=SinX,LinX=LinX,CosX=CosX)
  print(head(df),5)
  
  DataFrame <- df
  
  return(DataFrame)
  
}

ProcessPredictions <- function(TrainingPredictions,TestingPredictions,DataFrame,DataLoadParameters)
{
  # Put post process function in here
  #print(head(TestingPredictions),3)
  return(TestingPredictions)
  
}

DataFrameMaxAndMins <- function(DataFrame)
{
  
  # Compute the max and mins for each column in the data frame
  Columns <- colnames(DataFrame)
  maxs <- apply(DataFrame, 2, max) 
  mins <- apply(DataFrame, 2, min)
  
  return(list(ColumnNames=Columns,Maximums=maxs,Minimums=mins))
  
}

## Quick summary of data we are using to compute the column type and number of levels
DataAnalysis <- function(DataFrame,
                         PredictionVariable="",
                         Title = "",
                         PrintExamples = TRUE,
                         DrawCharts = TRUE,
                         DrawHistograms = TRUE,
                         DrawVersusPlots = TRUE)
{
  
  print("Data Analysis of DataFrame")
  print("")
  
  if (is.data.frame(DataFrame) == TRUE)
  {
    
    Cols <- colnames(DataFrame)
    
    for (col in Cols)
    {
      
      # Select the column number
      ColNo <- which(Cols == col)
      print(paste("Column",col))
      print(paste("    No unique values =",length(unique(DataFrame[,ColNo]))))
      print(paste("    Class",class(DataFrame[,ColNo]),"with",length(levels(DataFrame[,ColNo])),"levels"))
      
      # Print top five unique items
      if (PrintExamples == TRUE)
      {
        # Now print the top 5 unique values in the column
        for (i in head(unique(DataFrame[,ColNo]),5)){print(paste("        ",col,"=",i))}
      }
      
      # Now print summary if not a factor
      if (class(DataFrame[,ColNo])!= "factor") {
        print(paste("    Min",min(DataFrame[,ColNo]),
                    "Median",median(DataFrame[,ColNo]),
                    "Mean",mean(DataFrame[,ColNo]),
                    "Max",max(DataFrame[,ColNo])))
      }
      
      print(" ")
      
      if (DrawCharts == TRUE)
      {
        if (col != PredictionVariable)
        {
          # Now plot the results
          Prediction <- which(Cols == PredictionVariable)
          PredictionCol <- DataFrame[,Prediction]
          ActualCol <- DataFrame[,ColNo]
          PlotDF <- data.frame(Prediction = PredictionCol, Actual = ActualCol)
          
          if (DrawVersusPlots == TRUE)
          {
            ResultsPlot <- ggplot(PlotDF,aes(x=Actual,y=Prediction)) +
              geom_point(aes(x=Actual,y=Prediction),
                         colour="Blue",
                         fill="DarkBlue",
                         size=0.5) +
              geom_smooth(method="lm") +
              ylab(paste(PredictionVariable,"- Predict Column")) +
              xlab(paste(col,"- Example Column")) +
              theme(plot.title = element_text(size = 12),
                    axis.title.x = element_text(size = 10),
                    axis.title.y = element_text(size = 10),
                    text = element_text(size = 8)) +
              ggtitle(paste(Title,"-",PredictionVariable,"versus",col))
            print(ResultsPlot)
          }
        }
        
        if (DrawHistograms == TRUE)
        {
          # Now plot the histograms
          ResultsPlot <- ggplot(PlotDF,aes(x=Actual)) +
            geom_histogram(aes(x=Actual),
                           colour="Blue",
                           fill="DarkBlue",
                           size=0.5) +
            ylab(paste("Count")) +
            xlab(paste(col,"- Example Column")) +
            theme(plot.title = element_text(size = 12),
                  axis.title.x = element_text(size = 10),
                  axis.title.y = element_text(size = 10),
                  text = element_text(size = 8)) +
            ggtitle(paste(Title,"-","Histogram",col))
          print(ResultsPlot)
        } 
      }
    }
    
  }
}



# Split function
SplitData <- function(DataFrame,PercentToSplit,SplitUsingSampleMethod=TRUE)
{
  # Will add index column
  DataFrame$x <- seq(1,nrow(DataFrame))
  
  ## Number of rows to sample
  smp_size <- floor(PercentToSplit * nrow(DataFrame))
  
  print(paste("Using training sample size of",smp_size,"using",PercentToSplit,"% split"))
  print(paste("From total data set of",nrow(DataFrame),"rows"))
  
  if (SplitUsingSampleMethod == TRUE)
  {
    
    print("Using sampling method to select training data")
    
    # Create sampling index
    train_ind <- sample(DataFrame$x, size = smp_size)
    
    # Now split te data into training and test
    train <- DataFrame[train_ind, ]
    test <- DataFrame[-train_ind, ]
    
  } else {
    
    print("Using first n% to select training data")
    
    # Use the first percentage and test with the remaining
    train <- DataFrame[1:smp_size,]
    test <- DataFrame[(smp_size+1):nrow(DataFrame),]
    
  }
  
  # Check nrows of both
  print(paste("Number of rows in training set ... ",nrow(train)))
  print(paste("Number of rows in testing set ... ",nrow(test)))
  
  
  # Now remove the x variable
  train$x <- NULL
  test$x <- NULL
  
  # Return list of data frames
  ReturnList <- list(train,test)
  
  return(ReturnList)
}

# Function to pre-process the data - First selects columns, then rescales, then splits
PreProcess <- function(DataFrame,
                       Columns = "",
                       ColumnNames = "",
                       Backtest=TRUE,
                       Debug=TRUE,
                       PercentageToSplit=0,
                       UseSampleMethod=TRUE,
                       OneHotEncodeFactors=FALSE,
                       Rescale=FALSE,
                       MaxValues="",
                       MinValues="")
{
  
  
  if (Debug==TRUE) {print("PreProcessing data")}
  
  # Generic code
  DataFrame <- DataFrame[,Columns]
  colnames(DataFrame) <- ColumnNames
  
  
  # Rescale all data using provided max and mins
  if (Rescale == TRUE)
  {
    if (Debug==TRUE) {print("    Rescaling data now")}
    
    i <- 0
    for (Column in colnames(DataFrame))
    {
      i <- i + 1
      DataColumn <- DataFrame[,Column]
      if (is.factor(DataColumn) == FALSE)
      {
        print(paste("     ",Column,"is not a factor"))
        Max <- MaxValues[i]
        Min <- MinValues[i]
        print(paste("     ",Column,"has max",Max,"and min",Min))
        DataFrame[,Column] <- scale(DataColumn,center = Min,scale = Max - Min)
        
      }
    }
    
  }
  
  # One hot encode all factors now
  if (OneHotEncodeFactors == TRUE)
  {
    if (Debug==TRUE) {print("    One hot encoding data now")}
    
    # First refactor all the factor columns
    DataFrame <- as.data.frame(lapply(DataFrame, function (x) if (is.factor(x)) factor(x) else x)) 
    
    # One hot encode all the data in the data frame
    DataFrame = as.data.frame(model.matrix(~.-1,DataFrame))    # Convert to matrix
    
    # Remove spaces from the column names and replace with little x
    names(DataFrame) <-gsub(" ","x", names(DataFrame))
    
  }
  
  
  # Split data
  ListOfDataFrames <- SplitData(DataFrame,PercentToSplit=PercentageToSplit,SplitUsingSampleMethod=UseSampleMethod)
  
  
  return(ListOfDataFrames)
}

TrainingModelRF <- function(DataFrame,
                            ColumnNames,
                            PredictVariable="",
                            NTrees=5,
                            Backtest=TRUE,
                            Debug=TRUE,
                            SaveModel=FALSE,
                            PlotImportance=TRUE,
                            FileName = "Model")
{
  if (Debug==TRUE) {print("Training on data using RF Model")}
  if (Debug==TRUE) {print(paste("Predicting ....",PredictVariable))}
  if (Debug==TRUE) {print("Using Columns ....")}
  if (Debug==TRUE) {print(ColumnNames)}
  
  library(randomForest)
  
  # Select Cols required
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  PredictVariable <- DataFrame[,PredictVariable]
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  DataFrame <- cbind(VariableColumns,PredictVariable)
  
  #Print the fitting parameters
  if (Debug==TRUE) {print(paste("    Number of trees = ",NTrees))}
  
  # Train
  Model = randomForest(PredictVariable ~ . ,
                       data = DataFrame,
                       keep.forest=TRUE,
                       importance=TRUE,
                       ntree = NTrees)
  
  # Save model if required
  if (SaveModel == TRUE) {
    saveRDS(Model, paste(FileName,"_RF.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Saving to ",FileName,"_RF.rds",sep=""))}
  }
  
  # Plot importance
  if (PlotImportance == TRUE) {ImportancePlot(Model,"Example Importance Plot","Random Forest Model")}
  
  return(Model)
  
}

PredictRF <- function(DataFrame,
                      ColumnNames,
                      Model,
                      Backtest=TRUE,
                      Debug=TRUE,
                      LoadModel=FALSE,
                      FileName="Model",
                      PredictVariable="")
{
  if (Debug==TRUE) {print("Predicting from model and data using RF Model")}
  
  # Load Model required
  if (LoadModel == TRUE) {
    Model = readRDS(paste(FileName,"_RF.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Loaded from ",FileName,"_RF.rds",sep=""))}
  }
  
  #VariableColumns <- DataFrame[,ColumnNames]
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  DataFrame$Prediction <- predict(Model,VariableColumns)
  
  return(DataFrame)
}

####

TrainingModelDeepNet <- function(DataFrame,
                                 ColumnNames,
                                 PredictVariable="",
                                 Backtest=TRUE,
                                 Debug=TRUE,
                                 SaveModel=FALSE,
                                 FileName = "Model",
                                 activationfun = "sigm",   #  activation function of hidden unit.Can be "sigm","linear" or "tanh".Default is "sigm" for logistic function 
                                 learningrate  = 0.8,
                                 momentum      = 0.5,      # momentum for gradient descent. Default is 0.5
                                 learningrate_scale = 1,   # learning rate for gradient descent. Default is 0.8. 
                                 output        = "sigm",
                                 numepochs     = 100,      # increase to add accuracy
                                 batchsize    = 100,       # size of mini-batch. Default is 100.
                                 hidden_dropout = 0,       #  drop out fraction for hidden layer. Default is 0. 
                                 visible_dropout = 0)
{
  if (Debug==TRUE) {print("Training on data using DeepNet Model")}
  if (Debug==TRUE) {print(paste("Predicting ....",PredictVariable))}
  if (Debug==TRUE) {print("Using Columns ....")}
  if (Debug==TRUE) {print(ColumnNames)}
  
  # Select Cols required
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  PredictVariable <- DataFrame[,PredictVariable]
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  # Convert to matrix
  VariableColumns <- as.matrix(VariableColumns)
  
  library(deepnet)
  Model <- dbn.dnn.train(VariableColumns, PredictVariable, hidden = c(5,5),
                         activationfun = activationfun,   #  activation function of hidden unit.Can be "sigm","linear" or "tanh".Default is "sigm" for logistic function 
                         learningrate  = learningrate,
                         momentum      = momentum,      # momentum for gradient descent. Default is 0.5
                         learningrate_scale = learningrate_scale,   # learning rate for gradient descent. Default is 0.8. 
                         output        = output,
                         numepochs     = numepochs,      # increase to add accuracy
                         batchsize    = batchsize,       # size of mini-batch. Default is 100.
                         hidden_dropout = hidden_dropout,       #  drop out fraction for hidden layer. Default is 0. 
                         visible_dropout = visible_dropout)
  
  
  # Save model if required
  if (SaveModel == TRUE) {
    saveRDS(Model, paste(FileName,"_DeepNet.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Saving to ",FileName,"_DeepNet.rds",sep=""))}
  }
  
  return(Model)
  
}

PredictDeepNet <- function(DataFrame,
                           ColumnNames,
                           Model,
                           Backtest=TRUE,
                           Debug=TRUE,
                           LoadModel=FALSE,
                           FileName="Model",
                           PredictVariable="")
{
  if (Debug==TRUE) {print("Predicting from model and data using DeepNet Model")}
  
  # Load Model required
  if (LoadModel == TRUE) {
    Model = readRDS(paste(FileName,"_DeepNet.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Loaded from ",FileName,"_DeepNet.rds",sep=""))}
  }
  
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  # Convert to matrix
  VariableColumns <- as.matrix(VariableColumns)
  
  # Prediction
  DataFrame$Prediction <- nn.predict(Model, VariableColumns)
  
  
  return(DataFrame)
}

###

TrainingModelRFRLT <- function(DataFrame,
                               ColumnNames,
                               PredictVariable="",
                               NTrees=10,
                               Backtest=TRUE,
                               Debug=TRUE,
                               SaveModel=FALSE,
                               PlotImportance=TRUE,
                               RegType="",
                               FileName = "Model")
{
  if (Debug==TRUE) {print("Training on data using RFRLT model")}
  if (Debug==TRUE) {print(paste("Predicting ....",PredictVariable))}
  if (Debug==TRUE) {print("Using Columns ....")}
  if (Debug==TRUE) {print(ColumnNames)}
  if (Debug==TRUE) {print(paste("Using No Tress ....",NTrees))}
  if (Debug==TRUE) {print(paste("Using model ....",RegType))}
  
  library(RLT)
  
  # Select Cols required
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  PredictVariable <- DataFrame[,PredictVariable]
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  # Run model
  Model = RLT(VariableColumns, PredictVariable,
              model = RegType, #  regression, classification or survival 
              use.cores = 7,
              ntrees = NTrees,
              importance = PlotImportance, 
              reinforcement = FALSE,   # setting to true gives better results but very slow
              combsplit = 20,
              embed.ntrees = NTrees)
  
  # Save model if required
  if (SaveModel == TRUE) {
    saveRDS(Model, paste(FileName,"_RF_RLT.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Saving to ",FileName,"_RF_RLT.rds",sep=""))}
  }
  
  # Plot importance
  if (PlotImportance == TRUE) {barplot(Model$VarImp)}
  
  return(Model)
  
}

PredictRFRLT <- function(DataFrame,
                         ColumnNames,
                         Model,
                         Backtest=TRUE,
                         Debug=TRUE,
                         LoadModel=TRUE,
                         FileName="Model",
                         PredictVariable="")
{
  if (Debug==TRUE) {print("Predicting from RF RLT model and data")}
  
  #VariableColumns <- DataFrame[,ColumnNames]
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  # Load Model required
  if (LoadModel == TRUE) {
    Model = readRDS(paste(FileName,"_RF_RLT.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Loaded from ",FileName,"_RF_RLT.rds",sep=""))}
  }
  
  PredictionList <- predict(Model,VariableColumns)
  
  DataFrame$Prediction <- PredictionList[[2]]   # Select only the predictions
  
  return(DataFrame)
  
}

TrainingModelSVM <- function(DataFrame,
                             ColumnNames,
                             PredictVariable="",
                             Backtest=TRUE,
                             Debug=TRUE,
                             SaveModel=FALSE,
                             PlotImportance=TRUE,
                             FileName="Model")
{
  
  if (Debug==TRUE) {print("Training on data using Support Vector Machine")}
  if (Debug==TRUE) {print(paste("Predicting ....",PredictVariable))}
  if (Debug==TRUE) {print("Using Columns ....")}
  if (Debug==TRUE) {print(ColumnNames)}
  
  library(e1071)
  
  # Select Cols required
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  PredictVariable <- DataFrame[,PredictVariable]
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  Model <- svm(VariableColumns, PredictVariable,type="eps-regression")   #  C-classification 
  
  if (PlotImportance==TRUE)
  {
    print(summary(Model))
  }
  
  # Save model if required
  if (SaveModel == TRUE) {
    saveRDS(Model, paste(FileName,"_SVM.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Saving to ",FileName,"_SVM.rds",sep=""))}
  }
  
  return(Model)
  
}


PredictSVM <- function(DataFrame,ColumnNames,Model,
                       Backtest=TRUE,
                       Debug=TRUE,
                       LoadModel=FALSE,
                       FileName="Model",
                       PredictVariable="")
{
  if (Debug==TRUE) {print("Predicting from data using Support Vector Machine model")}
  
  #VariableColumns <- DataFrame[,ColumnNames]
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  # Load Model required
  if (LoadModel == TRUE) {
    Model = readRDS(paste(FileName,"_SVM.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Loaded from ",FileName,"_SVM.rds",sep=""))}
  }
  
  PredictionList <- predict(Model,VariableColumns)
  
  DataFrame$Prediction <- PredictionList   
  
  return(DataFrame)
  
}

# Call neural network and return the model of the network
TrainingModelNN <- function(DataFrame,
                            ColumnNames="",
                            PredictVariable="",
                            HiddenNodes="",
                            Backtest=TRUE,
                            Debug=TRUE,
                            SaveModel=TRUE,
                            FileName = "",
                            Iterations = 0)
{
  
  library(neuralnet)
  library(nnet)
  
  
  HiddenLayers <- paste(HiddenNodes,collapse=",")
  if (Debug==TRUE) {print(paste("Training on data using hidden layers of ",HiddenLayers))}
  
  # Get all column names minus the prediction variable
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  # Now create a df will both
  PredictVariableDF <- DataFrame[,PredictVariable]
  DataFrame <- cbind(VariableColumns,PredictVariableDF)
  
  n <- names(VariableColumns)
  
  f <- as.formula(paste("PredictVariableDF ~", paste(n[!n %in% PredictVariable], collapse = " + ")))
  
  Model = nnet(f,data=DataFrame,
               size=HiddenNodes,
               linout=T,
               decay=0.07,
               maxit=Iterations)
  
  #Model <- neuralnet(f,data=DataFrame,hidden=HiddenNodes,linear.output=T) # Linear.output = TRUE for regression
  
  # Save model if required
  if (SaveModel == TRUE) {
    saveRDS(Model, paste(FileName,"_NeuralNetworkModel.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Saving to ",FileName,"_NeuralNetworkModel.rds",sep=""))}
  }
  
  return(Model)
  
}

# Use model to predict results
# Take extreame care when editing this function to ensure no contamination of results
PredictNN <- function(DataFrame="",
                      PredictVariable="",
                      ColumnNames="",
                      Model,
                      Backtest=TRUE,
                      Debug=TRUE,
                      LoadModel=TRUE,
                      FileName = "")
{
  
  if (Debug==TRUE) {print("Predicting from model and data")}
  
  # Load Model required
  if (LoadModel == TRUE) {
    Model = readRDS(paste(FileName,"_NeuralNetworkModel.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Loaded from ",FileName,"_NeuralNetworkModel.rds",sep=""))}
  }
  
  # Get all column names minus the prediction variable
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  #Results <- compute(Model,VariableColumns)
  Results = predict(Model, VariableColumns)
  
  DataFrame$Prediction <- Results  
  
  return(DataFrame)
  
}

TrainingModelKNN <- function(DataFrame,
                             ColumnNames,
                             PredictVariable="",
                             K=10,
                             Backtest=TRUE,
                             Debug=TRUE,
                             SaveModel=FALSE,
                             PlotImportance=TRUE,
                             RegType="",
                             FileName = "Model")
{
  if (Debug==TRUE) {print("Training on data using KNN model")}
  if (Debug==TRUE) {print(paste("Predicting ....",PredictVariable))}
  if (Debug==TRUE) {print("Using Columns ....")}
  if (Debug==TRUE) {print(ColumnNames)}
  
  library(caret)
  
  # Select Cols required
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  PredictVariable <- DataFrame[,PredictVariable]
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  # Run model
  Model = knnreg(VariableColumns, PredictVariable,k = K)
  
  # Save model if required
  if (SaveModel == TRUE) {
    saveRDS(Model, paste(FileName,"_KNN.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Saving to ",FileName,"_KNN.rds",sep=""))}
  }
  
  return(Model)
  
}

PredictKNN <- function(DataFrame,
                       ColumnNames,
                       Model,
                       Backtest=TRUE,
                       Debug=TRUE,
                       LoadModel=TRUE,
                       FileName="Model",
                       PredictVariable="")
{
  if (Debug==TRUE) {print("Predicting from KNN model and data")}
  
  #VariableColumns <- DataFrame[,ColumnNames]
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  
  # Load Model required
  if (LoadModel == TRUE) {
    Model = readRDS(paste(FileName,"_KNN.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Loaded from ",FileName,"_KNN.rds",sep=""))}
  }
  
  Prediction <- predict(Model, VariableColumns)
  
  DataFrame$Prediction <- Prediction   # Select only the predictions
  
  return(DataFrame)
  
}

TrainingModelXGBoost <- function(DataFrame,
                                 ColumnNames,
                                 PredictVariable="",
                                 Backtest=TRUE,
                                 Debug=TRUE,
                                 SaveModel=FALSE,
                                 PlotImportance=TRUE,
                                 RegType="",
                                 FileName = "Model")
{
  
  if (Debug==TRUE) {print("Training on data using XGBoost model")}
  if (Debug==TRUE) {print(paste("Predicting ....",PredictVariable))}
  if (Debug==TRUE) {print("Using Columns ....")}
  if (Debug==TRUE) {print(ColumnNames)}
  
  library(xgboost)
  
  
  # Select Cols required
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  PredictVariable <- DataFrame[,PredictVariable]
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  # Train
  Model <- xgboost(data = data.matrix(VariableColumns),
                   label = PredictVariable,
                   booster = MLParameterList$booster,     
                   max_depth = MLParameterList$max_depth,
                   eta = MLParameterList$eta,
                   gamma = MLParameterList$gamma,
                   subsample = MLParameterList$subsample,
                   nthread = MLParameterList$nthread,
                   nrounds = MLParameterList$nrounds,
                   objective = MLParameterList$objective,  
                   verbose = MLParameterList$verbose)
  
  if (PlotImportance == TRUE)
  {
    # Plot the top 10 variables
    importance_matrix <- xgb.importance(VariableNames, model = Model)
    xgb.plot.importance(importance_matrix[1:10,])
  }
  
  # Save model if required
  if (SaveModel == TRUE) {
    saveRDS(Model, paste(FileName,"_XGBoost.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Saving to ",FileName,"_XGBoost.rds",sep=""))}
  }
  
  return(Model)
  
}

PredictXGBoost <- function(DataFrame,
                           ColumnNames,
                           Model,
                           Backtest=TRUE,
                           Debug=TRUE,
                           LoadModel=TRUE,
                           FileName="Model",
                           PredictVariable="")
{
  if (Debug==TRUE) {print("Predicting from XGBoost model and data")}
  
  #VariableColumns <- DataFrame[,ColumnNames]
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  # Load Model required
  if (LoadModel == TRUE) {
    Model = readRDS(paste(FileName,"_XGBoost.rds",sep=""))
    if (Debug==TRUE) {print(paste("    Loaded from ",FileName,"_XGBoost.rds",sep=""))}
  }
  
  # Predict
  Prediction <- predict(Model, data.matrix(VariableColumns))
  
  DataFrame$Prediction <- Prediction   # Select only the predictions
  
  return(DataFrame)
  
}

########################################
#
# KERAS Training Function
#
########################################

TrainingModelKeras <- function(DataFrame,
                               ColumnNames="",
                               PredictVariable="",
                               Backtest=TRUE,
                               Debug=TRUE,
                               SaveModel=FALSE,
                               FileName = "Model",
                               Type="classification",
                               Epochs=10,
                               BatchSize = 128,
                               ValidationSplit=0.2)
{
  library(keras)
  
  if (Debug==TRUE) {print(paste("Training on data using Keras model for type = ",Type))}
  if (Debug==TRUE) {print(paste("Predicting ....",PredictVariable))}
  if (Debug==TRUE) {print("Using Columns ....")}
  if (Debug==TRUE) {print(ColumnNames)}
  
  # Select Cols required
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  PredictVariable <- DataFrame[,PredictVariable]
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  # Convert to matrix
  VariableColumns <- as.matrix(VariableColumns)
  
  
  
  ## Creating the sequential model for classification
  CreateModelClassification <- function()
  {
    model = keras_model_sequential() %>%   
      layer_dense(units = 64, activation = "relu", 
                  input_shape = ncol(VariableColumns)) %>%
      layer_dense(units = 64, activation = "relu") %>%
      layer_dense(units = ncol(y_data_oneh), activation = "softmax")
    
    compile(model, 
            loss = "categorical_crossentropy",    
            optimizer = optimizer_rmsprop(), 
            metrics = "accuracy")
    
    return(model)
  }
  
  ## Creating the sequential model for regression
  CreateModelRegression <- function()
  {
    model <- keras_model_sequential() %>%
      layer_dense(units = 512, activation = "relu",
                  input_shape = dim(VariableColumns)[2],
                  kernel_initializer="normal") %>%
      layer_dense(units = 256, activation = "relu", kernel_initializer="normal") %>%
      layer_dense(units = 128, activation = "relu", kernel_initializer="normal") %>%
      layer_dense(units = 64, activation = "relu", kernel_initializer="normal") %>%
      layer_dense(units = 8, activation = "relu", kernel_initializer="normal") %>%
      layer_dense(units = 1, kernel_initializer="normal")
    
    model %>% compile(
      loss = "mse",
      optimizer = optimizer_adam(),
      metrics = list("mean_absolute_error")
    )
    
    
    return(model)
  }
  
  if (Type == "classification")
  {
    
    y_data_oneh=to_categorical(PredictVariable, num_classes = 2)
    print(head(y_data_oneh))
    model <- CreateModelClassification()
    
  }
  
  if (Type == "regression")
  {
    model <- CreateModelRegression()
    y_data_oneh = PredictVariable
  }
  
  # Fit model to data 
  history = fit(model,  VariableColumns, y_data_oneh, epochs = Epochs, batch_size = BatchSize, validation_split = ValidationSplit)
  plot(history)
  
  # Save model if required
  if (SaveModel == TRUE) {
    model %>% save_model_hdf5(paste(FileName,"_Keras.hdf5",sep=""))
    if (Debug==TRUE) {print(paste("    Saving to ",FileName,"_Keras.hdf5",sep=""))}
  }
  
  return(model)
  
}

########################################
#
# KERAS Prediction Function
#
########################################
PredictKeras <- function(DataFrame,
                         ColumnNames,
                         Model,
                         Backtest=TRUE,
                         Debug=TRUE,
                         LoadModel=FALSE,
                         FileName="Model",
                         PredictVariable="",
                         Type="Classification")
{
  if (Debug==TRUE) {print(paste("Predicting from model and data using Keras Model for",Type))}
  
  # Load Model required
  if (LoadModel == TRUE) {
    Model <- load_model_hdf5(paste(FileName,"_Keras.hdf5",sep=""))
    if (Debug==TRUE) {print(paste("    Loaded from ",FileName,"_Keras.hdf5",sep=""))}
  }
  
  VariableNames <- setdiff(colnames(DataFrame),PredictVariable)
  VariableColumns <- DataFrame[,VariableNames,drop=FALSE]
  
  # Convert to matrix
  VariableColumns <- as.matrix(VariableColumns)
  
  if (Type == "classification")
  {
    if (Debug==TRUE) {print(paste("Use predict classes to make predictions - ",Type))}
    DataFrame$Prediction = predict_classes(Model, VariableColumns)
  }
  
  if (Type == "regression")
  {
    if (Debug==TRUE) {print(paste("Use predict to make predictions - ",Type))}
    DataFrame$Prediction <- predict(Model, VariableColumns)
  }
  return(DataFrame)
  
}  


# Rescales and Handles the testing of the accuracy of fit
PostProcess <- function(DataFrame,
                        PredictVariable="",
                        Backtest=TRUE,
                        Debug=TRUE,
                        TestingSet=FALSE,
                        RegressionModel="",
                        Variable="",
                        RegType="",
                        DrawCharts = FALSE,
                        Rescale=FALSE,
                        MaxValues="",
                        MinValues="",
                        ColumnNames="")
{
  
  if (TestingSet == FALSE)
  {
    Item <- "Training Set"
    Title = paste("Training Data with",RegressionModel,"model predicting",Variable)
    if (Debug==TRUE) {print(paste("Post processing training data after running",RegressionModel,"model predicting",Variable))}
  } else {
    Item <- "Test Set"
    Title = paste("Testing Data with",RegressionModel,"model predicting",Variable)
    if (Debug==TRUE) {print(paste("Post processing testing data after running",RegressionModel,"model predicting",Variable))}
  }
  
  # Extract the predicted variable
  DataFrame$Actual <- DataFrame[,PredictVariable]
  
  # Now rescale the predicted variable if it was not a factor
  if (Rescale==TRUE)
  {
    if (Debug==TRUE) {print(paste("Rescaling prediction variable",PredictVariable))}
    
    # Find the prediction parameter in the columns list
    PredictCol <- which(ColumnNames==PredictVariable)
    
    # rescale now
    DataFrame$Prediction <- DataFrame$Prediction * (MaxValues[PredictCol] - MinValues[PredictCol]) + MinValues[PredictCol]
    DataFrame$Actual <- DataFrame$Actual * (MaxValues[PredictCol] - MinValues[PredictCol]) + MinValues[PredictCol]
  }
  
  # Handle x y type regression results
  if (RegType =="regression")
  {
    # reformat data
    DataFrame$Error <- DataFrame$Prediction - DataFrame$Actual
    
    # Calculate the RMSE and return it as part of the function
    RMSE <- sqrt(mean(DataFrame$Error^2))
    ReturnDataFrame <- data.frame(Desc=paste(Item,"RMS Error"),RMSE=RMSE)
    print(ReturnDataFrame)
    
    if (DrawCharts == TRUE)
    {
      # Now plot the results
      ResultsPlot <- ggplot(DataFrame,aes(x=Actual,y=Prediction)) +
        geom_point(aes(x=Actual,y=Prediction),
                   colour="Blue",
                   fill="DarkBlue") +
        geom_smooth(method="lm") +
        xlab("Actual Value") +
        ylab("Prediction") +
        theme(plot.title = element_text(size = 12),
              axis.title.x = element_text(size = 10),
              axis.title.y = element_text(size = 10),
              text = element_text(size = 8)) +
        ggtitle(paste("Actual versus Predicted - ",Title))
      print(ResultsPlot)
    }
  }
  
  # Handle classification problems
  if (RegType =="classification")
  {
    # Work out if not equal
    DataFrame$Error <- ifelse(DataFrame$Prediction == PredictVariable, 1, 0)
    print(DataFrame)
    
    # find errors
    ErrorsFrame <- subset(DataFrame,DataFrame$Prediction != DataFrame$Actual)
    print(paste("Number of rows predicted",nrow(DataFrame)))
    print(paste("Number of errors found",nrow(ErrorsFrame)))
    
    ReturnDataFrame <- ErrorsFrame
    
  }
  
  if (Debug==TRUE) {print(paste("Returning dataframe with results"))}
  
  return(DataFrame)
  
}

ImportancePlot <- function(Model,Title="",SubTitle="",Caption="")
{
  
  library(ggplot2)
  
  MeanDecreaseGini <- importance(Model)
  MeanDecreaseGini <- as.data.frame(MeanDecreaseGini)
  MeanDecreaseGini$Variable <- rownames(MeanDecreaseGini)
  
  ImpPlot <- ggplot(data = MeanDecreaseGini, aes(Variable, IncNodePurity)) +
    geom_bar(stat = "identity", position = "dodge",colour="red",alpha=0.8,fill="red") +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
    labs(caption = Caption) +
    ggtitle(Title,
            subtitle = paste(SubTitle)) 
  print(ImpPlot)
}


###############################################################################
#
#   Data Analysis Code
#
#   Use this function to load your data and draw charts of your data 
#
###############################################################################

MLDataAnalysis <- function(MLParameterList,DataLoadParameters)
{
  
  # Load data
  DataFrame <- DataLoadAndFormat(Backtest=MLParameterList$BackTest,
                                 Debug=MLParameterList$Debug,
                                 ConvertToFactors=MLParameterList$ConvertToFactors,
                                 DataLoadParameters)
  
  if (nrow(DataFrame)>0) 
  {
    
    # Check data formats before pre-processing
    #DataAnalysis(DataFrame,
    #             PredictionVariable  = MLParameterList$PredictionVariable,
    #             Title               = MLParameterList$ProjectTitle,
    #             PrintExamples       = MLParameterList$PrintExamplesinAnalysis,
    #             DrawCharts          = MLParameterList$DrawChartsinAnalysis,
    #             DrawHistograms      = MLParameterList$DrawHistograms,
    #             DrawVersusPlots     = MLParameterList$DrawVersusPlots)
    
    # Pre-Process
    ListOfDataFrames <- PreProcess(DataFrame,
                                   Columns = MLParameterList$ColumnsToSelectForTraining,
                                   ColumnNames = MLParameterList$DisplayColumnNames,
                                   Backtest = MLParameterList$BackTest,
                                   Debug = MLParameterList$Debug,
                                   PercentageToSplit = MLParameterList$SplitPercent,
                                   UseSampleMethod = MLParameterList$SamplingMethod,
                                   OneHotEncodeFactors=MLParameterList$OneHotEncodeFactors,
                                   Rescale=MLParameterList$Rescale,
                                   MaxValues=MLParameterList$Maximums,
                                   MinValues=MLParameterList$Minimums)
    
    # Check data formats after pre-processing
    DataAnalysis(ListOfDataFrames[[1]],
                 PredictionVariable  = MLParameterList$PredictionVariable,
                 Title               = MLParameterList$ProjectTitle,
                 PrintExamples       = MLParameterList$PrintExamplesinAnalysis,
                 DrawCharts          = MLParameterList$DrawChartsinAnalysis,
                 DrawHistograms      = MLParameterList$DrawHistograms,
                 DrawVersusPlots     = MLParameterList$DrawVersusPlots)
    
    # Display max and mins from training set
    print("Max and min values from training set")
    print(DataFrameMaxAndMins(ListOfDataFrames[[1]]))
    
  }
}

###############################################################################
#
#   Training Code
#
###############################################################################

MLTraining <- function(MLParameterList,DataLoadParameters)
{
  
  # Load data
  DataFrame <- DataLoadAndFormat(Backtest=MLParameterList$BackTest,
                                 Debug=MLParameterList$Debug,
                                 ConvertToFactors=MLParameterList$ConvertToFactors,
                                 DataLoadParameters)
  
  if (nrow(DataFrame)>0) 
  {
    
    # Pre-Process
    ListOfDataFrames <- PreProcess(DataFrame,
                                   Columns = MLParameterList$ColumnsToSelectForTraining,
                                   ColumnNames = MLParameterList$DisplayColumnNames,
                                   Backtest = MLParameterList$BackTest,
                                   Debug = MLParameterList$Debug,
                                   PercentageToSplit = MLParameterList$SplitPercent,
                                   UseSampleMethod = MLParameterList$SamplingMethod,
                                   OneHotEncodeFactors=MLParameterList$OneHotEncodeFactors,
                                   Rescale=MLParameterList$Rescale,
                                   MaxValues=MLParameterList$Maximums,
                                   MinValues=MLParameterList$Minimums)
    
    if (MLParameterList$RegressionModel == "SVM")
    {
      print("Training with Support Vector Machine")
      
      # Training
      Model <-     TrainingModelSVM(ListOfDataFrames[[1]],
                                    ColumnNames     = MLParameterList$VariableNames,
                                    PredictVariable = MLParameterList$PredictionVariable,
                                    Backtest        = MLParameterList$BackTest,
                                    Debug           = MLParameterList$Debug,
                                    SaveModel       = MLParameterList$SaveModelToFile,
                                    PlotImportance  = MLParameterList$DrawImportanceCharts,
                                    FileName        = MLParameterList$FileNameOfModel)
      
      # Predict from training
      TrainingPredictions <- PredictSVM(ListOfDataFrames[[1]],
                                        ColumnNames = MLParameterList$VariableNames,
                                        Model       = Model,
                                        Backtest    = MLParameterList$BackTest,
                                        Debug       = MLParameterList$Debug,
                                        LoadModel   = MLParameterList$SaveModelToFile,
                                        FileName    = MLParameterList$FileNameOfModel,
                                        PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TrainingResultsDataFrame <- PostProcess(TrainingPredictions,
                                              PredictVariable     = MLParameterList$PredictionVariable,
                                              Backtest            = MLParameterList$BackTest,
                                              Debug               = MLParameterList$Debug,
                                              TestingSet          = FALSE,
                                              RegressionModel     = MLParameterList$RegressionModel,
                                              Variable            = MLParameterList$PredictionVariable,
                                              RegType             = MLParameterList$RegressionType,
                                              DrawCharts          = MLParameterList$DrawChartsOfResults,
                                              Rescale=MLParameterList$Rescale,
                                              MaxValues=MLParameterList$Maximums,
                                              MinValues=MLParameterList$Minimums,
                                              ColumnNames=MLParameterList$DisplayColumnNames)
      
      
      # Predict testing set
      TestingPredictions <- PredictSVM(ListOfDataFrames[[2]],
                                       ColumnNames = MLParameterList$VariableNames,
                                       Model       = Model,
                                       Backtest    = MLParameterList$BackTest,
                                       Debug       = MLParameterList$Debug,
                                       LoadModel   = MLParameterList$SaveModelToFile,
                                       FileName    = MLParameterList$FileNameOfModel,
                                       PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      Results <- ProcessPredictions(TrainingResultsDataFrame,TestingResultsDataFrame,DataFrame,DataLoadParameters)
      
    }
    
    if (MLParameterList$RegressionModel == "RF")
    {
      
      print("Training with Random Forrest - Original version")
      
      # Training
      Model <-     TrainingModelRF(ListOfDataFrames[[1]],
                                   ColumnNames            = MLParameterList$VariableNames,
                                   PredictVariable        = MLParameterList$PredictionVariable,
                                   NTrees                 = MLParameterList$NumberOfTrees,
                                   Backtest               = MLParameterList$BackTest,
                                   Debug                  = MLParameterList$Debug,
                                   SaveModel              = MLParameterList$SaveModelToFile,
                                   PlotImportance         = MLParameterList$DrawImportanceCharts,
                                   FileName               = MLParameterList$FileNameOfModel)
      
      
      # Predict from training
      TrainingPredictions <- PredictRF(ListOfDataFrames[[1]],
                                       ColumnNames            = MLParameterList$VariableNames,
                                       Model                  = Model,
                                       Backtest               = MLParameterList$BackTest,
                                       Debug                  = MLParameterList$Debug,
                                       LoadModel              = MLParameterList$SaveModelToFile,
                                       FileName               = MLParameterList$FileNameOfModel,
                                       PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TrainingResultsDataFrame <- PostProcess(TrainingPredictions,
                                              PredictVariable     = MLParameterList$PredictionVariable,
                                              Backtest            = MLParameterList$BackTest,
                                              Debug               = MLParameterList$Debug,
                                              TestingSet          = FALSE,
                                              RegressionModel     = MLParameterList$RegressionModel,
                                              Variable            = MLParameterList$PredictionVariable,
                                              RegType             = MLParameterList$RegressionType,
                                              DrawCharts          = MLParameterList$DrawChartsOfResults,
                                              Rescale=MLParameterList$Rescale,
                                              MaxValues=MLParameterList$Maximums,
                                              MinValues=MLParameterList$Minimums,
                                              ColumnNames=MLParameterList$DisplayColumnNames)
      
      # Predict testing set
      TestingPredictions <- PredictRF(ListOfDataFrames[[2]],
                                      ColumnNames            = MLParameterList$VariableNames,
                                      Model                  = Model,
                                      Backtest               = MLParameterList$BackTest,
                                      Debug                  = MLParameterList$Debug,
                                      LoadModel              = MLParameterList$SaveModelToFile,
                                      FileName               = MLParameterList$FileNameOfModel,
                                      PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      Results <- ProcessPredictions(TrainingResultsDataFrame,TestingResultsDataFrame,DataFrame,DataLoadParameters)
      
    }
    
    if (MLParameterList$RegressionModel == "DEEPNET")
    {
      
      print("Training with DEEPNET")
      
      # Training
      Model <-     TrainingModelDeepNet(ListOfDataFrames[[1]],
                                        ColumnNames            = MLParameterList$VariableNames,
                                        PredictVariable        = MLParameterList$PredictionVariable,
                                        Backtest               = MLParameterList$BackTest,
                                        Debug                  = MLParameterList$Debug,
                                        SaveModel              = MLParameterList$SaveModelToFile,
                                        FileName               = MLParameterList$FileNameOfModel,
                                        activationfun          = MLParameterList$activationfun,
                                        learningrate           = MLParameterList$learningrate,
                                        momentum               = MLParameterList$momentum,
                                        learningrate_scale     = MLParameterList$learningrate_scale,
                                        output                 = MLParameterList$output,
                                        numepochs              = MLParameterList$numepochs,           
                                        batchsize              = MLParameterList$batchsize,          
                                        hidden_dropout         = MLParameterList$hidden_dropout,     
                                        visible_dropout        = MLParameterList$visible_dropout)
      
      
      # Predict from training
      TrainingPredictions <- PredictDeepNet(ListOfDataFrames[[1]],
                                            ColumnNames            = MLParameterList$VariableNames,
                                            Model                  = Model,
                                            Backtest               = MLParameterList$BackTest,
                                            Debug                  = MLParameterList$Debug,
                                            LoadModel              = MLParameterList$SaveModelToFile,
                                            FileName               = MLParameterList$FileNameOfModel,
                                            PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TrainingResultsDataFrame <- PostProcess(TrainingPredictions,
                                              PredictVariable     = MLParameterList$PredictionVariable,
                                              Backtest            = MLParameterList$BackTest,
                                              Debug               = MLParameterList$Debug,
                                              TestingSet          = FALSE,
                                              RegressionModel     = MLParameterList$RegressionModel,
                                              Variable            = MLParameterList$PredictionVariable,
                                              RegType             = MLParameterList$RegressionType,
                                              DrawCharts          = MLParameterList$DrawChartsOfResults,
                                              Rescale=MLParameterList$Rescale,
                                              MaxValues=MLParameterList$Maximums,
                                              MinValues=MLParameterList$Minimums,
                                              ColumnNames=MLParameterList$DisplayColumnNames)
      
      # Predict testing set
      TestingPredictions <- PredictDeepNet(ListOfDataFrames[[2]],
                                           ColumnNames            = MLParameterList$VariableNames,
                                           Model                  = Model,
                                           Backtest               = MLParameterList$BackTest,
                                           Debug                  = MLParameterList$Debug,
                                           LoadModel              = MLParameterList$SaveModelToFile,
                                           FileName               = MLParameterList$FileNameOfModel,
                                           PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      Results <- ProcessPredictions(TrainingResultsDataFrame,TestingResultsDataFrame,DataFrame,DataLoadParameters)
      
    }
    
    if (MLParameterList$RegressionModel == "RFRLT")
    {
      print("Training with Random Forrest - RLT version")
      
      # Training
      Model <-     TrainingModelRFRLT(ListOfDataFrames[[1]],
                                      ColumnNames       = MLParameterList$VariableNames,
                                      PredictVariable   = MLParameterList$PredictionVariable,
                                      NTrees            = MLParameterList$NumberOfTrees,
                                      SaveModel         = MLParameterList$SaveModelToFile,
                                      PlotImportance    = MLParameterList$DrawImportanceCharts,
                                      RegType           = MLParameterList$RegressionType,
                                      FileName          = MLParameterList$FileNameOfModel)
      
      
      # Predict from training
      TrainingPredictions <- PredictRFRLT(ListOfDataFrames[[1]],
                                          ColumnNames       = MLParameterList$VariableNames,
                                          Model             = Model,
                                          Backtest          = MLParameterList$BackTest,
                                          Debug             = MLParameterList$Debug,
                                          LoadModel         = MLParameterList$SaveModelToFile,
                                          FileName          = MLParameterList$FileNameOfModel,
                                          PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TrainingResultsDataFrame <- PostProcess(TrainingPredictions,
                                              PredictVariable     = MLParameterList$PredictionVariable,
                                              Backtest            = MLParameterList$BackTest,
                                              Debug               = MLParameterList$Debug,
                                              TestingSet          = FALSE,
                                              RegressionModel     = MLParameterList$RegressionModel,
                                              Variable            = MLParameterList$PredictionVariable,
                                              RegType             = MLParameterList$RegressionType,
                                              DrawCharts          = MLParameterList$DrawChartsOfResults,
                                              Rescale=MLParameterList$Rescale,
                                              MaxValues=MLParameterList$Maximums,
                                              MinValues=MLParameterList$Minimums,
                                              ColumnNames=MLParameterList$DisplayColumnNames)
      
      # Predict testing set
      TestingPredictions <- PredictRFRLT(ListOfDataFrames[[2]],
                                         ColumnNames       = MLParameterList$VariableNames,
                                         Model             = Model,
                                         Backtest          = MLParameterList$BackTest,
                                         Debug             = MLParameterList$Debug,
                                         LoadModel         = MLParameterList$SaveModelToFile,
                                         FileName          = MLParameterList$FileNameOfModel,
                                         PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      Results <- ProcessPredictions(TrainingResultsDataFrame,TestingResultsDataFrame,DataFrame,DataLoadParameters)
      
    }
    
    if (MLParameterList$RegressionModel == "NN")
    {
      
      print("Training with Neural Network version")
      
      # Training
      Model <-     TrainingModelNN(ListOfDataFrames[[1]],
                                   ColumnNames    = MLParameterList$ColumnsToSelectForTraining,
                                   PredictVariable= MLParameterList$PredictionVariable,
                                   HiddenNodes    = MLParameterList$HiddenLayersStructure,
                                   Backtest       = MLParameterList$BackTest,
                                   Debug          = MLParameterList$Debug,
                                   SaveModel      = MLParameterList$SaveModelToFile,
                                   FileName        = MLParameterList$FileNameOfModel,
                                   Iterations      = MLParameterList$Iterations)
      
      # Predict training set
      TrainingPredictions <- PredictNN(DataFrame=ListOfDataFrames[[1]],
                                       PredictVariable =  MLParameterList$PredictionVariable,
                                       ColumnNames     =  MLParameterList$DisplayColumnNames,
                                       Model,
                                       Backtest        =  MLParameterList$BackTest,
                                       Debug           =  MLParameterList$Debug,
                                       LoadModel       =  MLParameterList$SaveModelToFile,
                                       FileName        =  MLParameterList$FileNameOfModel)
      
      # Do results processing
      TrainingResultsDataFrame <- PostProcess(TrainingPredictions,
                                              PredictVariable     = MLParameterList$PredictionVariable,
                                              Backtest            = MLParameterList$BackTest,
                                              Debug               = MLParameterList$Debug,
                                              TestingSet          = FALSE,
                                              RegressionModel     = MLParameterList$RegressionModel,
                                              Variable            = MLParameterList$PredictionVariable,
                                              RegType             = MLParameterList$RegressionType,
                                              DrawCharts          = MLParameterList$DrawChartsOfResults,
                                              Rescale=MLParameterList$Rescale,
                                              MaxValues=MLParameterList$Maximums,
                                              MinValues=MLParameterList$Minimums,
                                              ColumnNames=MLParameterList$DisplayColumnNames)
      
      # Predict training set
      TestingPredictions <- PredictNN(DataFrame=ListOfDataFrames[[2]],
                                      PredictVariable =  MLParameterList$PredictionVariable,
                                      ColumnNames     =  MLParameterList$DisplayColumnNames,
                                      Model,
                                      Backtest        =  MLParameterList$BackTest,
                                      Debug           =  MLParameterList$Debug,
                                      LoadModel       =  MLParameterList$SaveModelToFile,
                                      FileName        =  MLParameterList$FileNameOfModel)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      
      Results <- ProcessPredictions(TrainingResultsDataFrame,TestingResultsDataFrame,DataFrame,DataLoadParameters)
    }
    
    # Use KNN model to train and predict
    if (MLParameterList$RegressionModel == "KNN")
    {
      print("Training with K nearest neighbour")
      
      # Training
      Model <-     TrainingModelKNN(ListOfDataFrames[[1]],
                                    ColumnNames       = MLParameterList$VariableNames,
                                    PredictVariable   = MLParameterList$PredictionVariable,
                                    K                 = MLParameterList$K,
                                    SaveModel         = MLParameterList$SaveModelToFile,
                                    PlotImportance    = MLParameterList$DrawImportanceCharts,
                                    RegType           = MLParameterList$RegressionType,
                                    FileName          = MLParameterList$FileNameOfModel)
      
      
      # Predict from training
      TrainingPredictions <- PredictKNN(ListOfDataFrames[[1]],
                                        ColumnNames       = MLParameterList$VariableNames,
                                        Model             = Model,
                                        Backtest          = MLParameterList$BackTest,
                                        Debug             = MLParameterList$Debug,
                                        LoadModel         = MLParameterList$SaveModelToFile,
                                        FileName          = MLParameterList$FileNameOfModel,
                                        PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TrainingResultsDataFrame <- PostProcess(TrainingPredictions,
                                              PredictVariable     = MLParameterList$PredictionVariable,
                                              Backtest            = MLParameterList$BackTest,
                                              Debug               = MLParameterList$Debug,
                                              TestingSet          = FALSE,
                                              RegressionModel     = MLParameterList$RegressionModel,
                                              Variable            = MLParameterList$PredictionVariable,
                                              RegType             = MLParameterList$RegressionType,
                                              DrawCharts          = MLParameterList$DrawChartsOfResults,
                                              Rescale=MLParameterList$Rescale,
                                              MaxValues=MLParameterList$Maximums,
                                              MinValues=MLParameterList$Minimums,
                                              ColumnNames=MLParameterList$DisplayColumnNames)
      
      # Predict testing set
      TestingPredictions <- PredictKNN(ListOfDataFrames[[2]],
                                       ColumnNames       = MLParameterList$VariableNames,
                                       Model             = Model,
                                       Backtest          = MLParameterList$BackTest,
                                       Debug             = MLParameterList$Debug,
                                       LoadModel         = MLParameterList$SaveModelToFile,
                                       FileName          = MLParameterList$FileNameOfModel,
                                       PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      Results <- ProcessPredictions(TrainingResultsDataFrame,TestingResultsDataFrame,DataFrame,DataLoadParameters)
      
    }
    
    # Use XGBoost model to train and predict
    if (MLParameterList$RegressionModel == "XGB")
    {
      print("Training with XGBoost nearest neighbour")
      
      # Training
      Model <-     TrainingModelXGBoost(ListOfDataFrames[[1]],
                                        ColumnNames       = MLParameterList$VariableNames,
                                        PredictVariable   = MLParameterList$PredictionVariable,
                                        SaveModel         = MLParameterList$SaveModelToFile,
                                        PlotImportance    = MLParameterList$DrawImportanceCharts,
                                        RegType           = MLParameterList$RegressionType,
                                        FileName          = MLParameterList$FileNameOfModel)
      
      
      # Predict from training
      TrainingPredictions <- PredictXGBoost(ListOfDataFrames[[1]],
                                            ColumnNames       = MLParameterList$VariableNames,
                                            Model             = Model,
                                            Backtest          = MLParameterList$BackTest,
                                            Debug             = MLParameterList$Debug,
                                            LoadModel         = MLParameterList$SaveModelToFile,
                                            FileName          = MLParameterList$FileNameOfModel,
                                            PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TrainingResultsDataFrame <- PostProcess(TrainingPredictions,
                                              PredictVariable     = MLParameterList$PredictionVariable,
                                              Backtest            = MLParameterList$BackTest,
                                              Debug               = MLParameterList$Debug,
                                              TestingSet          = FALSE,
                                              RegressionModel     = MLParameterList$RegressionModel,
                                              Variable            = MLParameterList$PredictionVariable,
                                              RegType             = MLParameterList$RegressionType,
                                              DrawCharts          = MLParameterList$DrawChartsOfResults,
                                              Rescale=MLParameterList$Rescale,
                                              MaxValues=MLParameterList$Maximums,
                                              MinValues=MLParameterList$Minimums,
                                              ColumnNames=MLParameterList$DisplayColumnNames)
      
      # Predict testing set
      TestingPredictions <- PredictXGBoost(ListOfDataFrames[[2]],
                                           ColumnNames       = MLParameterList$VariableNames,
                                           Model             = Model,
                                           Backtest          = MLParameterList$BackTest,
                                           Debug             = MLParameterList$Debug,
                                           LoadModel         = MLParameterList$SaveModelToFile,
                                           FileName          = MLParameterList$FileNameOfModel,
                                           PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      Results <- ProcessPredictions(TrainingResultsDataFrame,TestingResultsDataFrame,DataFrame,DataLoadParameters)
    }
    
    # Use KERAS model to train and predict
    if (MLParameterList$RegressionModel == "KERAS")
    {
      print("Training with KERAS deep neural networks")
      
      Model <- TrainingModelKeras(DataFrame       = ListOfDataFrames[[1]],
                                  ColumnNames     = MLParameterList$VariableNames,
                                  PredictVariable = MLParameterList$PredictionVariable,
                                  Backtest        = MLParameterList$BackTest,
                                  Debug           = MLParameterList$Debug,
                                  SaveModel       = MLParameterList$SaveModelToFile,
                                  FileName        = MLParameterList$FileNameOfModel,
                                  Type            = MLParameterList$RegressionType,
                                  Epochs          = MLParameterList$Epochs,
                                  BatchSize       = MLParameterList$BatchSize,
                                  ValidationSplit = MLParameterList$ValidationSplit)
      
      # Predict from training
      TrainingPredictions <- PredictKeras(DataFrame=ListOfDataFrames[[1]],
                                          ColumnNames     = MLParameterList$VariableNames,
                                          Model           = Model,
                                          Backtest        = MLParameterList$BackTest,
                                          Debug           = MLParameterList$Debug,
                                          LoadModel       = MLParameterList$SaveModelToFile,
                                          FileName        = MLParameterList$FileNameOfModel,
                                          PredictVariable = MLParameterList$PredictionVariable,
                                          Type=MLParameterList$RegressionType)
      
      # Do results processing
      TrainingResultsDataFrame <- PostProcess(TrainingPredictions,
                                              PredictVariable     = MLParameterList$PredictionVariable,
                                              Backtest            = MLParameterList$BackTest,
                                              Debug               = MLParameterList$Debug,
                                              TestingSet          = FALSE,
                                              RegressionModel     = MLParameterList$RegressionModel,
                                              Variable            = MLParameterList$PredictionVariable,
                                              RegType             = MLParameterList$RegressionType,
                                              DrawCharts          = MLParameterList$DrawChartsOfResults,
                                              Rescale=MLParameterList$Rescale,
                                              MaxValues=MLParameterList$Maximums,
                                              MinValues=MLParameterList$Minimums,
                                              ColumnNames=MLParameterList$DisplayColumnNames)
      
      # Predict from training
      TestingPredictions <- PredictKeras(DataFrame=ListOfDataFrames[[2]],
                                         ColumnNames     = MLParameterList$VariableNames,
                                         Model           = Model,
                                         Backtest        = MLParameterList$BackTest,
                                         Debug           = MLParameterList$Debug,
                                         LoadModel       = MLParameterList$SaveModelToFile,
                                         FileName        = MLParameterList$FileNameOfModel,
                                         PredictVariable = MLParameterList$PredictionVariable,
                                         Type            = MLParameterList$RegressionType)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      Results <- ProcessPredictions(TrainingResultsDataFrame,TestingResultsDataFrame,DataFrame,DataLoadParameters)
    }
  } else {
    
    print("No data found")
    
  }
  
  
  return(Results)
  
}


###############################################################################
#
#   Prediction Function
#
###############################################################################

MLPrediction <- function(MLParameterList,DataLoadParameters)
{
  
  # Load data
  DataFrame <- DataLoadAndFormat(Backtest   =  MLParameterList$BackTest,
                                 Debug      =  MLParameterList$Debug,
                                 ConvertToFactors = MLParameterList$ConvertToFactors,
                                 DataLoadParameters = DataLoadParameters)
  
  if (nrow(DataFrame)>0) 
  {
    
    # Pre-Process
    ListOfDataFrames <- PreProcess(DataFrame,
                                   Columns = MLParameterList$ColumnsToSelectForTraining,
                                   ColumnNames = MLParameterList$DisplayColumnNames,
                                   Backtest = MLParameterList$BackTest,
                                   Debug = MLParameterList$Debug,
                                   PercentageToSplit = MLParameterList$SplitPercent,
                                   UseSampleMethod = MLParameterList$SamplingMethod,
                                   OneHotEncodeFactors=MLParameterList$OneHotEncodeFactors,
                                   Rescale=MLParameterList$Rescale,
                                   MaxValues=MLParameterList$Maximums,
                                   MinValues=MLParameterList$Minimums)
    
    if (MLParameterList$RegressionModel == "SVM")
    {
      print("Predicting with a Support Vector Machine")
      
      # Predict testing set
      TestingPredictions <- PredictSVM(ListOfDataFrames[[2]],
                                       ColumnNames = MLParameterList$VariableNames,
                                       Model       = Model,
                                       Backtest    = MLParameterList$BackTest,
                                       Debug       = MLParameterList$Debug,
                                       LoadModel   = MLParameterList$SaveModelToFile,
                                       FileName    = MLParameterList$FileNameOfModel,
                                       PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      
    }
    
    if (MLParameterList$RegressionModel == "RF")
    {
      
      print("Prediction with Random Forrest - Original version")
      
      # Predict testing set
      TestingPredictions <- PredictRF(ListOfDataFrames[[2]],
                                      ColumnNames            = MLParameterList$VariableNames,
                                      Model                  = Model,
                                      Backtest               = FALSE,
                                      Debug                  = FALSE,
                                      LoadModel              = TRUE,
                                      FileName               = MLParameterList$FileNameOfModel)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = FALSE,
                                             Debug               = FALSE,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
    }
    
    if (MLParameterList$RegressionModel == "RFRLT")
    {
      print("Predicting with Random Forrest - RLT version")
      
      
      # Predict testing set
      TestingPredictions <- PredictRFRLT(ListOfDataFrames[[2]],
                                         ColumnNames       = MLParameterList$VariableNames,
                                         Model             = Model,
                                         Backtest          = MLParameterList$BackTest,
                                         Debug             = MLParameterList$Debug,
                                         LoadModel         = MLParameterList$SaveModelToFile,
                                         FileName          = MLParameterList$FileNameOfModel,
                                         PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      
    }
    
    # Use XGBoost model to train and predict
    if (MLParameterList$RegressionModel == "XGB")
    {
      print("Predicting with XGBoost")
      
      
      # Predict testing set
      TestingPredictions <- PredictXGBoost(ListOfDataFrames[[2]],
                                           ColumnNames       = MLParameterList$VariableNames,
                                           Model             = Model,
                                           Backtest          = MLParameterList$BackTest,
                                           Debug             = MLParameterList$Debug,
                                           LoadModel         = MLParameterList$SaveModelToFile,
                                           FileName          = MLParameterList$FileNameOfModel,
                                           PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
    }
    
    # Use KNN model to train and predict
    if (MLParameterList$RegressionModel == "KNN")
    {
      print("Training with K nearest neighbour")
      
      # Predict testing set
      TestingPredictions <- PredictKNN(ListOfDataFrames[[2]],
                                       ColumnNames       = MLParameterList$VariableNames,
                                       Model             = Model,
                                       Backtest          = MLParameterList$BackTest,
                                       Debug             = MLParameterList$Debug,
                                       LoadModel         = MLParameterList$SaveModelToFile,
                                       FileName          = MLParameterList$FileNameOfModel,
                                       PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      
    }
    
    if (MLParameterList$RegressionModel == "NN")
    {
      
      print("Training with Neural Network version")
      
      # Predict training set
      TestingPredictions <- PredictNN(DataFrame=ListOfDataFrames[[2]],
                                      PredictVariable =  MLParameterList$PredictionVariable,
                                      ColumnNames     =  MLParameterList$DisplayColumnNames,
                                      Model,
                                      Backtest        =  MLParameterList$BackTest,
                                      Debug           =  MLParameterList$Debug,
                                      LoadModel       =  MLParameterList$SaveModelToFile,
                                      FileName        =  MLParameterList$FileNameOfModel)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      
    }
    
    if (MLParameterList$RegressionModel == "DEEPNET")
    {
      
      print("Training with DEEPNET")
      
      # Predict testing set
      TestingPredictions <- PredictDeepNet(ListOfDataFrames[[2]],
                                           ColumnNames            = MLParameterList$VariableNames,
                                           Model                  = Model,
                                           Backtest               = MLParameterList$BackTest,
                                           Debug                  = MLParameterList$Debug,
                                           LoadModel              = MLParameterList$SaveModelToFile,
                                           FileName               = MLParameterList$FileNameOfModel,
                                           PredictVariable = MLParameterList$PredictionVariable)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
      
    }
    if (MLParameterList$RegressionModel == "KERAS")
    {
      
      print("Training with KERAS")
      
      # Predict from training
      TestingPredictions <- PredictKeras(DataFrame=ListOfDataFrames[[2]],
                                         ColumnNames     = MLParameterList$VariableNames,
                                         Model           = Model,
                                         Backtest        = MLParameterList$BackTest,
                                         Debug           = MLParameterList$Debug,
                                         LoadModel       = MLParameterList$SaveModelToFile,
                                         FileName        = MLParameterList$FileNameOfModel,
                                         PredictVariable = MLParameterList$PredictionVariable,
                                         Type            = MLParameterList$RegressionType)
      
      # Do results processing
      TestingResultsDataFrame <- PostProcess(TestingPredictions,
                                             PredictVariable     = MLParameterList$PredictionVariable,
                                             Backtest            = MLParameterList$BackTest,
                                             Debug               = MLParameterList$Debug,
                                             TestingSet          = TRUE,
                                             RegressionModel     = MLParameterList$RegressionModel,
                                             Variable            = MLParameterList$PredictionVariable,
                                             RegType             = MLParameterList$RegressionType,
                                             DrawCharts          = MLParameterList$DrawChartsOfResults,
                                             Rescale=MLParameterList$Rescale,
                                             MaxValues=MLParameterList$Maximums,
                                             MinValues=MLParameterList$Minimums,
                                             ColumnNames=MLParameterList$DisplayColumnNames)
      
    }
  } else {
    print("No data found")
  }
  
  Results <- ProcessPredictions(TrainingResultsDataFrame,TestingResultsDataFrame,DataFrame,DataLoadParameters)
  
  
  return(Results)
  
}

# Call these two functions when script is sourced
DataLoadParameters <- SetDataLoadParameters()
MLParameterList    <- SetParameters()

# Data analysis function
#MLDataAnalysis(MLParameterList,DataLoadParameters)


# Call the training function
#MLParameterList$RegressionModel           <- "RF" 
#Results <- MLTraining(MLParameterList,DataLoadParameters)
#print(head(Results))
#plot(Results$Actual)
#plot(Results$Prediction)


ModelTest <- function()
{
  # Auto ML - Which model gives best predictions
  ModelsToTest <- c("RF","NN","KNN","XGB","RFRLT","SVM","KERAS","DEEPNET")   # ,"DEEPNET" - cannot use on single x,y fits
  
 # ModelsToTest <- c("KERAS")
  ListOfResults <- data.frame(Model = "NA",RMS = 0)
  for (Model in ModelsToTest)
  {
    MLParameterList$RegressionModel           <- Model 
    Results <- MLTraining(MLParameterList,DataLoadParameters)
    ResultsPlot <- ggplot(Results,aes(x=X,y=Prediction)) +
      geom_point(aes(x=X,y=Prediction),
                 colour="Blue",
                 fill="DarkBlue",
                 size=0.5) +
      ylab(paste("Predict Column")) +
      xlab(paste("Example Column")) +
      theme(plot.title = element_text(size = 12),
            axis.title.x = element_text(size = 10),
            axis.title.y = element_text(size = 10),
            text = element_text(size = 8)) +
      ggtitle(paste("Results",Model))
    print(ResultsPlot)
    ListOfResults <- rbind(ListOfResults,data.frame(Model=Model,RMS=sqrt(mean(Results$Error * Results$Error))))
  }
  ListOfResults <- ListOfResults[-1,]
  ListOfResults$RMS <- round(ListOfResults$RMS,5)
  library(plyr)
  ListOfResults <- arrange(ListOfResults,RMS)
  print(ListOfResults)
}

ModelTest()
