
# Histogram and machine learning bins

CreateBreaks <- function(Values="",Multiplier=2,Type="linear",Plot=TRUE,NumberOfBins=0,VariableName="Price",Debug=TRUE,MinBreaks=10)
{
  library(ggplot2)
  
  if (Debug==TRUE) {print("CreateBreaks started")}
  
  if (NumberOfBins == 0)
  {
    if (Debug==TRUE) {print("Number of bins will be set automatically from data")}
    
    # The Freedman-Diaconis rule 
    num_bins <- diff(range(Values)) / (2 * IQR(Values) / length(Values)^(1/3))
    
    # Apply the multiplier
    num_bins <- num_bins * Multiplier
    
  } else {
    
    num_bins <- NumberOfBins
  
  }
  
  if (Debug==TRUE) {print(paste("Number of bins used will be ",round(num_bins)))}
  
  
  if (Type == "linear")
  {
    # Work out the range and where to start from
    Min <- min(Values)
    Max <- max(Values)
    Range <- Max - Min
    Interval <- Range / round(num_bins)
    Breaks <- Min
    NextBreak = Min
    for (bin in seq(1:round(num_bins)))
    {
      NextBreak <- NextBreak + Interval
      Breaks <- append(Breaks,NextBreak)
    }
  }
  
  if (Type == "deciles")
  {
    Quantiles <- quantile(Values, prob = seq(0, 1, length = num_bins+1), type = 5) # Set length = 11 for Deciles
    Breaks <- as.numeric(Quantiles)
  }
  
  if (Debug==TRUE) {print("Breaks found are:")}
  if (Debug==TRUE) {print(Breaks)}
  
  # Bin reduction
  # Reduce so that we do not get multiple breaks with the same value
  UniqueValues <- length(unique(Breaks))
  NumberOfBreaks <- length(Breaks)
  if (UniqueValues < NumberOfBreaks)
  {
    Breaks <- unique(Breaks)
  }
  
  if (Debug==TRUE) {print("Breaks found after unique value restriction are:")}
  if (Debug==TRUE) {print(Breaks)}
  
  # Do not return any breaks if we have less than MinBreaks
  if (length(Breaks) < MinBreaks)
  {
    if (Debug==TRUE) {print("Not enough breaks found, returning zero")}
    Breaks <- 0
  }
  
  if (Plot == TRUE & length(Breaks) != 1)
  {
    # First work out the size of the gaps
    Break_Gaps <- NULL
    for (i in seq(1,length(Breaks)-1))
    {
      Break_Gap <- Breaks[i+1] - Breaks[i]
      Break_Gaps <- append(Break_Gaps,Break_Gap)
    }
    x = seq(1,length(Breaks)-1)
    y = Break_Gaps
    
    df <- data.frame(x,y)
    BinGapPlot <- ggplot(df) + 
      geom_line(aes(x=x,y=y)) + 
      labs(title=paste("Bin Gaps of ",VariableName),x="Bin Number",y="Value Gap between Breaks")
    print(BinGapPlot)
    
    HistPlot <- ggplot() + 
      geom_histogram(aes(x=Values),breaks=Breaks) + 
      labs(title=paste("Histogram of ",VariableName),x=VariableName,y="Count")
    print(HistPlot)
  }
  
  if (Debug==TRUE) {print("CreateBreaks finished")}
  
  #Breaks <- append(Breaks,Max)
  return(Breaks)
  
}

# Auto bin into catagories using breaks provided by CreateBreaks() function
#    DataFrame="" - Data frame name to process
#    Columns=""   - Column to process
#    Debug=TRUE   - Switch on debug
#    Breaks=""    - Breaks of splits you want (Use CreateBreaks function to create them)
#    ReplaceColumns=TRUE  - Replaces the columns with the catagorical columns
#    CreateOutlierBins=FALSE   - Any values found less than min put into lowest bin, and high than last bin
#                                put into the last bin

AutoBin <- function(DataFrame="",Columns="",Debug=TRUE,Breaks="",ReplaceColumns=TRUE,CreateOutlierBins=FALSE)
{
  if (Debug==TRUE) {print("Autobin started")}
  
  # If we need to process all columns
  if (Columns=="") {
    Columns <- colnames(DataFrame)
  }  
  
  # Build Dataframe of columns required
  AllCols <- NULL
  ColNames <- NULL
  for (col in Columns)
  {
    if (Debug==TRUE) {print(paste("Processing",col))}
    Column <- DataFrame[,col]
    
    # If its numeric
    if (is.numeric(Column) == TRUE)
    {
      Cats <- cut(Column, Breaks)
      if (CreateOutlierBins == FALSE)
      {
        NewCats <- ifelse(Cats == 0,1,Cats)
        NewCats <- ifelse(NewCats == length(Breaks),length(Breaks)-1,NewCats)
        Cats <- NewCats
      }
      AllCols <- cbind(AllCols,Cats)
      ColNames <- append(ColNames,paste(col,"_AutoBin",sep=""))
      if (Debug==TRUE) {print(paste("Created new column ",col,"_AutoBin",sep=""))}
    }
  }
  
  AllCols <- data.frame(AllCols)
  colnames(AllCols) <- ColNames
  
  if (ReplaceColumns == TRUE)
  {
    for (col in Columns)
    {
      DataFrame[,col] <- NULL
    }
  }
  
  DataFrame <- cbind(DataFrame,AllCols)
  
  if (Debug==TRUE) {print("Autobin finished")}
  
  return(DataFrame)
  
}

AutoBinAllNumeric <- function(DataFrame="",Columns="",Debug=TRUE,ReplaceColumns=TRUE,CreateOutlierBins=FALSE,Multiplier=1,Type="deciles",Plot=TRUE)
{
  if (Debug==TRUE) {print("Autobin all numeric started")}
  
  # If we need to process all columns
  if (Columns=="") {
    Columns <- colnames(DataFrame)
  }  
  
  # Build Dataframe of columns required
  AllCols <- NULL
  ColNames <- NULL
  for (cols in Columns)
  {
    Column <- DataFrame[,cols]
    SingleColDF <- data.frame(cols=Column)
    colnames(SingleColDF) <- cols
    if (is.numeric(Column) == TRUE)
    {
      TheseBreaks <- CreateBreaks(Column,Multiplier=Multiplier,Type="deciles",Plot=TRUE,NumberOfBins=10,VariableName=cols,MinBreaks=5)
      if (length(TheseBreaks) != 1)
      {
        NewDF <- AutoBin(DataFrame=SingleColDF,Column=c(cols),Debug=TRUE,Breaks=TheseBreaks,ReplaceColumns=ReplaceColumns,CreateOutlierBins=CreateOutlierBins)
        NewColumn <- NewDF[,ncol(NewDF)]
        NewColumnName <- colnames(NewDF)[length(NewDF)]
        ColNames <- append(ColNames,NewColumnName)
        AllCols <- cbind(AllCols,NewColumn)
      }
    }
  }

  colnames(AllCols) <- ColNames
  
  if (Debug==TRUE) {print("Autobin all numeric finished")}
  
  return(AllCols)
  
}

DataFrame <- DataLoadRAW(Debug=TRUE)
Dealers <- DataFrame$NUMOFDEALERS
TheseBreaks <- CreateBreaks(Dealers,Multiplier=1,Type="deciles",Plot=TRUE,NumberOfBins=0,VariableName="Price",MinBreaks=10)
print(TheseBreaks)


# Create a distribution
Prices <- rnorm(200,100,10)
MyDF <- data.frame(BidPrices=Prices,AskPrices=Prices+1)

TheseBreaks <- CreateBreaks(Prices,Multiplier=1,Type="deciles",Plot=TRUE,NumberOfBins=50,VariableName="Price",MinBreaks=10)
print(TheseBreaks)

# Create a distribution with more variation
Prices <- rnorm(20,100,30)
MyDF <- data.frame(BidPrices=Prices,AskPrices=Prices+1)

NewDF <- AutoBin(DataFrame=MyDF,Columns=c("BidPrices"),Debug=TRUE,Breaks=TheseBreaks,ReplaceColumns=FALSE,CreateOutlierBins=FALSE)
NewDF <- AutoBin(DataFrame=NewDF,Columns=c("AskPrices"),Debug=TRUE,Breaks=TheseBreaks,ReplaceColumns=FALSE,CreateOutlierBins=FALSE)
print(head(NewDF,20))

# Auto catagorise numeric data
#Newdf <- AutoBinAllNumeric(DataFrame=MyDF,Columns="",Debug=TRUE,ReplaceColumns=TRUE,CreateOutlierBins=FALSE,Multiplier=1,Type="deciles",Plot=TRUE)

#print(head(Newdf,20))

Newdf <- AutoBinAllNumeric(DataFrame=DataFrame,Columns="",Debug=TRUE,ReplaceColumns=TRUE,CreateOutlierBins=FALSE,Multiplier=1,Type="deciles",Plot=TRUE)
rownames(DataFrame) <- rownames(DataFrame)
print(head(Newdf,20))
