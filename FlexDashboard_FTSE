---
title: "Cluster Analysis"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
    source_code: embed
---

Cluster Analysis Example
=======================================================================

Column {data-width=650}
-----------------------------------------------------------------------


```{r setup, include=TRUE}

# Set up the script to be quiet when running
knitr::opts_knit$set(progress = FALSE, verbose = FALSE)

# Load all the libraries required
library(flexdashboard)
library(plotly)
library(plyr)
library(DT)

# Now add the main machine learning library
source("BenchTest_Machine_Learning_Framework.R")

# Load a data set
DataLoadAndFormat <- function(Backtest=TRUE,Debug=TRUE,ConvertToFactors=FALSE,DataLoadParameters="")
{
  if (Debug==TRUE) {print("Creating calibration data")}
  
  DataSet <- "FTSE"
 
  # Used for classification example (set PredictionVariable = Species)
  if (DataSet == "Iris")
  {
    DataFrame = data.frame(iris)
    DataFrame$SpeciesNumber <- as.integer(DataFrame$Species)
    DataFrame$Species <- NULL
  }
  
  # Used for example of regression (Set PredictionVariable = mpg)
  if (DataSet == "mtcars")
  {
    DataFrame = data.frame(mtcars)
    #DataFrame = head(DataFrame,500)
  }
  
  if (DataSet == "Sunspots")
  {
    library(dplyr)
    library(timetk)
    library(lubridate)
    library(tidyquant)
    library(tibbletime)
    
    sun_spots <- datasets::sunspot.month %>%
    tk_tbl() %>%
    mutate(index = as_date(index)) %>%
    as_tbl_time(index = index)
    DataFrame <- as.data.frame(sun_spots)
    colnames(DataFrame) <- c("Date","Sunspots")
    DataFrame$Date <- NULL
    
    DataFrame <- LagDataFrame(DataFrame=DataFrame,     # Data frame name
                  Column="Sunspots",       # Name of the column to be adjusted
                  Periods=9,        # Number of intervals to go backwards or forwards
                  MissingValues=NA, # What do you want the missing values to be (use NA so you can remove with na.omit())
                  KeepAll=TRUE,    # Create columns for all periods in between
                Backwards=TRUE)   # Set to true to create next values (ie n periods in the future)
    DataFrame <- na.omit(DataFrame)
    
  }

  
  
  if (DataSet == "FTSE")
  {
    
    DataFrame <- as.data.frame(EuStockMarkets)
    DataFrame <- data.frame(PriceFTSE=DataFrame$FTSE,PriceDAX=DataFrame$DAX)
      
    # Calc percent return
    DataFrame <- CalcPercentReturn(DataFrame=DataFrame,
                                  Column="PriceFTSE",
                                  NBack=1,
                                  KeepActual=FALSE,
                                  Percent=TRUE,
                                  TRIM=TRUE,
                                  BP=FALSE)
    
    DataFrame <- CalcPercentReturn(DataFrame=DataFrame,
                                  Column="PriceDAX",
                                  NBack=1,
                                  KeepActual=FALSE,
                                  Percent=TRUE,
                                  TRIM=TRUE,
                                  BP=FALSE)
    
    DataFrame <- LagDataFrame(DataFrame=DataFrame,     # Data frame name
                  Column="PriceFTSE_Prev_1_Back_PctBP",       # Name of the column to be adjusted
                  Periods=5,        # Number of intervals to go backwards or forwards
                  MissingValues=NA, # What do you want the missing values to be (use NA so you can remove with na.omit())
                  KeepAll=TRUE,    # Create columns for all periods in between
                Backwards=TRUE)   # Set to true to create next values (ie n periods in the future)
    
    DataFrame <- LagDataFrame(DataFrame=DataFrame,     # Data frame name
                  Column="PriceDAX_Prev_1_Back_PctBP",       # Name of the column to be adjusted
                  Periods=5,        # Number of intervals to go backwards or forwards
                  MissingValues=NA, # What do you want the missing values to be (use NA so you can remove with na.omit())
                  KeepAll=TRUE,    # Create columns for all periods in between
                Backwards=TRUE)   # Set to true to create next values (ie n periods in the future)
    
    DataFrame <- na.omit(DataFrame)
    DataFrame$x <- seq(1,nrow(DataFrame))
    
    
    
  }
  
  if (Debug==TRUE) {print("Finished loading test data")}
  
 
  
  return(DataFrame)
  
}



```

### KMeans

```{r}

DataFrame <- DataLoadAndFormat(Backtest=TRUE,Debug=FALSE,ConvertToFactors=FALSE,DataLoadParameters="")
SaveFTSEPrice <- DataFrame$PriceFTSE
SaveDAXPrice <- DataFrame$PriceDAX
DataFrame$PriceFTSE <- NULL
DataFrame$PriceDAX <- NULL
    
NewDataFrame <- KmeansClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=4,
                                       ScaleData = TRUE,
                                       PlotModel = TRUE,
                                       Debug=FALSE)

```

### Fuzzy

```{r}

DataFrame <- DataLoadAndFormat(Backtest=TRUE,Debug=FALSE,ConvertToFactors=FALSE,DataLoadParameters="")
DataFrame$PriceFTSE <- NULL
DataFrame$PriceDAX <- NULL
NewDataFrame <- FuzzyClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=4,
                                       ScaleData = TRUE,
                                       PlotModel = TRUE,
                                       Debug=FALSE)

```

Column {data-width=650}
-----------------------------------------------------------------------

### Fuzzy Hk means Clustering

```{r}

DataFrame <- DataLoadAndFormat(Backtest=TRUE,Debug=FALSE,ConvertToFactors=FALSE,DataLoadParameters="")
DataFrame$PriceFTSE <- NULL
DataFrame$PriceDAX <- NULL
NewDataFrame <- FuzzyHkmeansClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=4,
                                       ScaleData = TRUE,
                                       PlotModel = TRUE,
                                       Debug=FALSE)

```


### Fuzzy cMeans

```{r}

DataFrame <- DataLoadAndFormat(Backtest=TRUE,Debug=FALSE,ConvertToFactors=FALSE,DataLoadParameters="")
DataFrame$PriceFTSE <- NULL
DataFrame$PriceDAX <- NULL
NewDataFrame <- FuzzyCMeansClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=4,
                                       ScaleData = TRUE,
                                       PlotModel = TRUE,
                                       Debug=FALSE)

```


### Model Based Clustering

```{r}

DataFrame <- DataLoadAndFormat(Backtest=TRUE,Debug=FALSE,ConvertToFactors=FALSE,DataLoadParameters="")
DataFrame$PriceFTSE <- NULL
DataFrame$PriceDAX <- NULL
NewDataFrame <- ModelBasedClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=0,
                                       ScaleData = TRUE,
                                       PlotModel = FALSE,
                                       Debug=FALSE)

NewDataFrame <- FuzzyCMeansClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=length(unique(NewDataFrame$ClusterGroup)),
                                       ScaleData = TRUE,
                                       PlotModel = TRUE,
                                       Debug=FALSE)

```

### Model Based Analysis

```{r}
print(paste("Number of clusters .... optimal = ",length(unique(NewDataFrame$ClusterGroup))))
```



Output
=======================================================================


Column {data-width=650}
-----------------------------------------------------------------------

### Analysis

```{r}
NewDataFrame$PriceFTSE <- SaveFTSEPrice
NewDataFrame$PriceDAX <- SaveDAXPrice

NewDataFrame <- tail(NewDataFrame,100)
library(ggplot2)
      ResultsPlot1 <- ggplot(NewDataFrame,aes(x=x,y=PriceFTSE,color=ClusterGroup)) +
        geom_point(
                  size=1,
                  alpha=1) +
        geom_point(aes(x=x,y=PriceDAX,color=ClusterGroup),
                  size=1,
                  alpha=1) +
        xlab(paste("X")) +
        ylab(paste("Price")) +
        theme_AI() +
        ggtitle("FTSE prices") +
        scale_fill_hue(l=40, c=35)
 
print(ResultsPlot1)
```

Data Table
=======================================================================


Column {data-width=650}
-----------------------------------------------------------------------

### Last 100 Results

```{r}

library(DT)
DT::datatable(NewDataFrame, options = list(pageLength = length(NewDataFrame)))

```
