###########################################################
#
# Machine Learning Framework
#
# Data Analysis Stub
#
###########################################################
#
# Designed to ensure that data is correctly loaded 
#
# By B. G. Bland (Fidessa RAID Team)


# Clear all previous variables
rm(list=ls())

library(ggplot2)

# This example uses the mtcars dataset which is provided in base R.
# Use the following fields to change the behaviour

#[, 1]	mpg	  -   Miles/(US) gallon
#[, 2]	cyl	  -   Number of cylinders
#[, 3]	disp	-   Displacement (cu.in.)
#[, 4]	hp	  -   Gross horsepower
#[, 5]	drat	-   Rear axle ratio
#[, 6]	wt	  -   Weight (1000 lbs)
#[, 7]	qsec	-   1/4 mile time
#[, 8]	vs	  -   Engine (0 = V-shaped, 1 = straight)
#[, 9]	am	  -   Transmission (0 = automatic, 1 = manual)
#[,10]	gear	-   Number of forward gears
#[,11]	carb	-   Number of carburetors

# Edit these variables to control the columns to fit
ProjectTitle <- "MTCARS Analysis"
ColumnsToSelectForTraining <- c("carb","cyl","disp","hp","gear","wt","vs","am") # Reduce data set from original
DisplayColumnNames <- c("Carburetors","Cylinders","Displacement","HorsePower","Gears","Weight","StraightEngine","ManualTransmission")    # Rename the columns

# Prediction variable
PredictionVariable <- "HorsePower"                                          # y^ the prediction variable
VariableNames <- setdiff(DisplayColumnNames,PredictionVariable)

# Data Analysis Options
PrintExamplesinAnalysis <- TRUE
DrawChartsinAnalysis <- TRUE

#####################################################################################
#
# Functions - Edit the DataLoadandFormat Function to ingest the data
#
#####################################################################################

# Function to load a check data 
DataLoadAndFormat <- function(Backtest=TRUE,Debug=TRUE)
{
  if (Debug==TRUE) {print("Loading data")}
 
  
  # Use example MTCARS data set
  DataFrame <- as.data.frame(mtcars)
  
  # Apply filters here
  DataFrame <- subset(DataFrame,hp > 60)   # Removes the small horsepower records
  
  # Apply converstion to factors for columns required
  DataFrame$carb <- factor(DataFrame$carb)
  DataFrame$cyl <- factor(DataFrame$cyl)
  DataFrame$gear <- factor(DataFrame$gear)
  DataFrame$vs <- factor(DataFrame$vs)
  DataFrame$am <- factor(DataFrame$am)
  
  return(DataFrame)
}

###########################################################################################
#
# Do not modify beneath here ................
#
###########################################################################################

## Quick summary of data we are using to compute the column type and number of levels
DataAnalysis <- function(DataFrame,PredictionVariable="",Title = "",PrintExamples = TRUE,DrawCharts = TRUE)
{
  
  print("Data Analysis of DataFrame")
  print("")
  
  if (is.data.frame(DataFrame) == TRUE)
  {
      
    Cols <- colnames(DataFrame)
    
    for (col in Cols)
    {
      
      # Select the column number
      ColNo <- which(Cols == col)
      print(paste("Column",col))
      print(paste("    No unique values =",length(unique(DataFrame[,ColNo]))))
      print(paste("    Class",class(DataFrame[,ColNo]),"with",length(levels(DataFrame[,ColNo])),"levels"))
      
      # Print top five unique items
      if (PrintExamples == TRUE)
      {
        # Now print the top 5 unique values in the column
        for (i in head(unique(DataFrame[,ColNo]),5)){print(paste("        ",col,"=",i))}
      }
      # Now print summary if not a factor
      if (class(DataFrame[,ColNo])!= "factor") {
        print(paste("    Min",min(DataFrame[,ColNo]),
                    "Median",median(DataFrame[,ColNo]),
                    "Mean",mean(DataFrame[,ColNo]),
                    "Max",max(DataFrame[,ColNo])))
      }
      
      print(" ")
      
      if (DrawCharts == TRUE)
      {
        if (col != PredictionVariable)
        {
          # Now plot the results
          Prediction <- which(Cols == PredictionVariable)
          PredictionCol <- DataFrame[,Prediction]
          ActualCol <- DataFrame[,ColNo]
          PlotDF <- data.frame(Prediction = PredictionCol, Actual = ActualCol)
          
          ResultsPlot <- ggplot(PlotDF,aes(x=Actual,y=Prediction)) +
            geom_point(aes(x=Actual,y=Prediction),
                       colour="Blue",
                       fill="DarkBlue",
                       size=0.5) +
            geom_smooth(method="lm") +
            ylab(paste(PredictionVariable,"- Predict Column")) +
            xlab(paste(col,"- Example Column")) +
            theme(plot.title = element_text(size = 12),
                  axis.title.x = element_text(size = 10),
                  axis.title.y = element_text(size = 10),
                  text = element_text(size = 8)) +
            ggtitle(paste(Title,"-",PredictionVariable,"versus",col))
          print(ResultsPlot)
        }
      }
    }
  }
}

# Function to pre-process the data
PreProcessWithoutSplit <- function(DataFrame,Columns,ColumnNames,Backtest=TRUE,Debug=TRUE)
{
  if (Debug==TRUE) {print("PreProcessing data")}
  
  # Generic code
  DataFrame <- DataFrame[,Columns]
  colnames(DataFrame) <- ColumnNames
  
  return(DataFrame)
}


# Get data
DataFrame <- DataLoadAndFormat(Backtest=FALSE,Debug=TRUE)

# Preprocess function
DataFrame <- PreProcessWithoutSplit(DataFrame,
                                      ColumnsToSelectForTraining,
                                      DisplayColumnNames,
                                      Backtest=TRUE,
                                      Debug=TRUE)

# Check data formats after pre-processing
DataAnalysis(DataFrame,
             PredictionVariable,
             ProjectTitle,
             PrintExamples = PrintExamplesinAnalysis,
             DrawCharts = DrawChartsinAnalysis)

# End of script
