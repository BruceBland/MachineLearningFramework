---
title: "Cluster Analysis"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
    source_code: embed
---

Cluster Analysis Example
=======================================================================

Column {data-width=650}
-----------------------------------------------------------------------


```{r setup, include=TRUE}

# Set up the script to be quiet when running
knitr::opts_knit$set(progress = FALSE, verbose = FALSE)

# Load all the libraries required
library(flexdashboard)
library(plotly)
library(plyr)
library(DT)

# Now add the main machine learning library
source("BenchTest_Machine_Learning_Framework_Beta_0_2.R")

# Load a data set
DataLoadAndFormat <- function(Backtest=TRUE,Debug=TRUE,ConvertToFactors=FALSE,DataLoadParameters="")
{
  if (Debug==TRUE) {print("Creating calibration data")}
  
  DataSet <- "Iris"
 
  # Used for classification example (set PredictionVariable = Species)
  if (DataSet == "Iris")
  {
    DataFrame = data.frame(iris)
    DataFrame$SpeciesNumber <- as.integer(DataFrame$Species)
    DataFrame$Species <- NULL
  }
  
  # Used for example of regression (Set PredictionVariable = mpg)
  if (DataSet == "mtcars")
  {
    DataFrame = data.frame(mtcars)
    #DataFrame = head(DataFrame,500)
  }
  
  if (DataSet == "Sunspots")
  {
    library(dplyr)
    library(timetk)
    library(lubridate)
    library(tidyquant)
    library(tibbletime)
    
    sun_spots <- datasets::sunspot.month %>%
    tk_tbl() %>%
    mutate(index = as_date(index)) %>%
    as_tbl_time(index = index)
    DataFrame <- as.data.frame(sun_spots)
    colnames(DataFrame) <- c("Date","Sunspots")
    DataFrame$Date <- NULL
    
    DataFrame <- LagDataFrame(DataFrame=DataFrame,     # Data frame name
                  Column="Sunspots",       # Name of the column to be adjusted
                  Periods=9,        # Number of intervals to go backwards or forwards
                  MissingValues=NA, # What do you want the missing values to be (use NA so you can remove with na.omit())
                  KeepAll=TRUE,    # Create columns for all periods in between
                Backwards=TRUE)   # Set to true to create next values (ie n periods in the future)
    DataFrame <- na.omit(DataFrame)
    
  }
  
  if (DataSet == "FTSE")
  {
    
    DataFrame <- as.data.frame(EuStockMarkets)
    DataFrame <- data.frame(Price=DataFrame$FTSE)
    DataFrame <- LagDataFrame(DataFrame=DataFrame,     # Data frame name
                  Column="Price",       # Name of the column to be adjusted
                  Periods=10,        # Number of intervals to go backwards or forwards
                  MissingValues=NA, # What do you want the missing values to be (use NA so you can remove with na.omit())
                  KeepAll=TRUE,    # Create columns for all periods in between
                Backwards=TRUE)   # Set to true to create next values (ie n periods in the future)
    DataFrame <- na.omit(DataFrame)
  }
  
  if (Debug==TRUE) {print("Finished loading test data")}
  
 
  
  return(DataFrame)
  
}



```

### KMeans

```{r}

DataFrame <- DataLoadAndFormat(Backtest=TRUE,Debug=FALSE,ConvertToFactors=FALSE,DataLoadParameters="")
NewDataFrame <- KmeansClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=8,
                                       ScaleData = TRUE,
                                       PlotModel = TRUE,
                                       Debug=FALSE)

```

### Fuzzy

```{r}

DataFrame <- DataLoadAndFormat(Backtest=TRUE,Debug=FALSE,ConvertToFactors=FALSE,DataLoadParameters="")
NewDataFrame <- FuzzyClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=8,
                                       ScaleData = TRUE,
                                       PlotModel = TRUE,
                                       Debug=FALSE)

```

Column {data-width=650}
-----------------------------------------------------------------------

### Fuzzy Hk means Clustering

```{r}

DataFrame <- DataLoadAndFormat(Backtest=TRUE,Debug=FALSE,ConvertToFactors=FALSE,DataLoadParameters="")
NewDataFrame <- FuzzyHkmeansClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=8,
                                       ScaleData = TRUE,
                                       PlotModel = TRUE,
                                       Debug=FALSE)

```


### Fuzzy cMeans

```{r}

DataFrame <- DataLoadAndFormat(Backtest=TRUE,Debug=FALSE,ConvertToFactors=FALSE,DataLoadParameters="")
NewDataFrame <- FuzzyCMeansClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=8,
                                       ScaleData = TRUE,
                                       PlotModel = TRUE,
                                       Debug=FALSE)

```


### Model Based Clustering

```{r}

DataFrame <- DataLoadAndFormat(Backtest=TRUE,Debug=FALSE,ConvertToFactors=FALSE,DataLoadParameters="")
NewDataFrame <- ModelBasedClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=0,
                                       ScaleData = TRUE,
                                       PlotModel = FALSE,
                                       Debug=FALSE)

NewDataFrame <- FuzzyCMeansClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=length(unique(NewDataFrame$ClusterGroup)),
                                       ScaleData = TRUE,
                                       PlotModel = TRUE,
                                       Debug=FALSE)

```

### Model Based Analysis

```{r}
print(paste("Number of clusters .... optimal = ",length(unique(NewDataFrame$ClusterGroup))))
```

